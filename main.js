(()=>{let e=[],t=0;function i(e,i,n,d){this.title=e,this.author=i,this.pages=n,this.isRead=d,this.index=t++}function n(t){e.push(t);let i=document.createElement("div");i.setAttribute("data-index",t.index),i.classList.add("book"),d(i,"book-title","Title",t.title),d(i,"book-author","Author",t.author),d(i,"book-pages","Pages",t.pages),d(i,"book-status","Status",t.isRead?"Have Read":"Not Read Yet");let n=document.createElement("button");n.addEventListener("click",a),n.innerText="Toggle Status",i.appendChild(n);let l=document.createElement("button");l.addEventListener("click",o),l.innerText="Delete Book",i.appendChild(l),r.appendChild(i)}function d(e,t,i,n){let d=document.createElement("p");d.classList.add(t),d.innerText=`${i}: ${n}`,e.appendChild(d)}function a(){let t,i=this.parentElement,n=+i.getAttribute("data-index");e.forEach((e=>{e.index===n&&(t=e)})),t.toggleStatus(),i.getElementsByClassName("book-status")[0].innerText="Status: "+(t.isRead?"Have Read":"Not Read Yet"),l()}function o(){let t,i=this.parentElement,n=+i.getAttribute("data-index");e.forEach((e=>{e.index===n&&(t=e)})),t.isDeleted=!0,i.remove(),l()}function l(){let t=[];e.forEach((e=>{e.isDeleted||t.push(e)})),localStorage.setItem("OdinLibrary",JSON.stringify(t))}i.prototype.toggleStatus=function(){this.isRead=!this.isRead};const c=document.getElementById("add-button"),s=document.getElementById("add-form"),r=document.getElementById("library"),u=document.getElementById("hide-button"),g=document.getElementById("form-button"),h=s.children,m=h[1],p=h[4],b=h[7],v=h[10];c.addEventListener("click",(()=>{s.toggleAttribute("hidden"),c.toggleAttribute("hidden"),u.toggleAttribute("hidden")})),u.addEventListener("click",(()=>{s.toggleAttribute("hidden"),c.toggleAttribute("hidden"),u.toggleAttribute("hidden")})),m.addEventListener("input",(()=>{m.checkValidity()})),p.addEventListener("input",(()=>{m.checkValidity()})),b.addEventListener("input",(()=>{m.checkValidity()})),g.addEventListener("click",(e=>m.validity.valid?(p.checkValidity(),p.validity.valid?(b.checkValidity(),b.validity.valid?(console.log("book accepted"),n(new i(m.value,p.value,b.value,v.checked)),l(),void e.preventDefault()):(console.log("pages rejected"),!1)):(console.log("author rejected"),!1)):(console.log("title rejected"),!1)));const E=JSON.parse(localStorage.getItem("OdinLibrary"));if(E&&0!==E.length)for(let e in E){const d=E[e];d.index=t++,n(new i(d.title,d.author,d.pages,d.isRead))}else n(new i("The quick brown fox","a lazy dog","5",!1)),l()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,