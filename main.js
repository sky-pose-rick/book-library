/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}();class e{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}wrapCallback(t){return(e,n)=>{e?this.reject(e):this.resolve(n),"function"==typeof t&&(this.promise.catch((()=>{})),1===t.length?t(e):t(e,n))}}}function n(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}class i extends Error{constructor(t,e,n){super(e),this.code=t,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,i.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,s.prototype.create)}}class s{constructor(t,e,n){this.service=t,this.serviceName=e,this.errors=n}create(t,...e){const n=e[0]||{},s=`${this.service}/${t}`,o=this.errors[t],a=o?function(t,e){return t.replace(r,((t,n)=>{const i=e[n];return null!=i?String(i):`<${n}?>`}))}(o,n):"Error",h=`${this.serviceName}: ${a} (${s}).`;return new i(s,h,n)}}const r=/\{\$([^}]+)}/g;function o(t,e){if(t===e)return!0;const n=Object.keys(t),i=Object.keys(e);for(const s of n){if(!i.includes(s))return!1;const n=t[s],r=e[s];if(a(n)&&a(r)){if(!o(n,r))return!1}else if(n!==r)return!1}for(const t of i)if(!n.includes(t))return!1;return!0}function a(t){return null!==t&&"object"==typeof t}function h(t){return t&&t._delegate?t._delegate:t}class c{constructor(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(t){return this.instantiationMode=t,this}setMultipleInstances(t){return this.multipleInstances=t,this}setServiceProps(t){return this.serviceProps=t,this}setInstanceCreatedCallback(t){return this.onInstanceCreated=t,this}}const l="[DEFAULT]";class u{constructor(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(t){const n=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(n)){const t=new e;if(this.instancesDeferred.set(n,t),this.isInitialized(n)||this.shouldAutoInitialize())try{const e=this.getOrInitializeService({instanceIdentifier:n});e&&t.resolve(e)}catch(t){}}return this.instancesDeferred.get(n).promise}getImmediate(t){var e;const n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),i=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(i)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(i)return null;throw t}}getComponent(){return this.component}setComponent(t){if(t.name!==this.name)throw Error(`Mismatching Component ${t.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:l})}catch(t){}for(const[t,e]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(t);try{const t=this.getOrInitializeService({instanceIdentifier:n});e.resolve(t)}catch(t){}}}}clearInstance(t="[DEFAULT]"){this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)}async delete(){const t=Array.from(this.instances.values());await Promise.all([...t.filter((t=>"INTERNAL"in t)).map((t=>t.INTERNAL.delete())),...t.filter((t=>"_delete"in t)).map((t=>t._delete()))])}isComponentSet(){return null!=this.component}isInitialized(t="[DEFAULT]"){return this.instances.has(t)}getOptions(t="[DEFAULT]"){return this.instancesOptions.get(t)||{}}initialize(t={}){const{options:e={}}=t,n=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const i=this.getOrInitializeService({instanceIdentifier:n,options:e});for(const[t,e]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(t)&&e.resolve(i);return i}onInit(t,e){var n;const i=this.normalizeInstanceIdentifier(e),s=null!==(n=this.onInitCallbacks.get(i))&&void 0!==n?n:new Set;s.add(t),this.onInitCallbacks.set(i,s);const r=this.instances.get(i);return r&&t(r,i),()=>{s.delete(t)}}invokeOnInitCallbacks(t,e){const n=this.onInitCallbacks.get(e);if(n)for(const i of n)try{i(t,e)}catch(t){}}getOrInitializeService({instanceIdentifier:t,options:e={}}){let n=this.instances.get(t);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(i=t,i===l?void 0:i),options:e}),this.instances.set(t,n),this.instancesOptions.set(t,e),this.invokeOnInitCallbacks(n,t),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,t,n)}catch(t){}var i;return n||null}normalizeInstanceIdentifier(t="[DEFAULT]"){return this.component?this.component.multipleInstances?t:l:t}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class f{constructor(t){this.name=t,this.providers=new Map}addComponent(t){const e=this.getProvider(t.name);if(e.isComponentSet())throw new Error(`Component ${t.name} has already been registered with ${this.name}`);e.setComponent(t)}addOrOverwriteComponent(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)}getProvider(t){if(this.providers.has(t))return this.providers.get(t);const e=new u(t,this);return this.providers.set(t,e),e}getProviders(){return Array.from(this.providers.values())}}const d=[];var p,g;(g=p||(p={}))[g.DEBUG=0]="DEBUG",g[g.VERBOSE=1]="VERBOSE",g[g.INFO=2]="INFO",g[g.WARN=3]="WARN",g[g.ERROR=4]="ERROR",g[g.SILENT=5]="SILENT";const m={debug:p.DEBUG,verbose:p.VERBOSE,info:p.INFO,warn:p.WARN,error:p.ERROR,silent:p.SILENT},y=p.INFO,v={[p.DEBUG]:"log",[p.VERBOSE]:"log",[p.INFO]:"info",[p.WARN]:"warn",[p.ERROR]:"error"},w=(t,e,...n)=>{if(e<t.logLevel)return;const i=(new Date).toISOString(),s=v[e];if(!s)throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);console[s](`[${i}]  ${t.name}:`,...n)};class E{constructor(t){this.name=t,this._logLevel=y,this._logHandler=w,this._userLogHandler=null,d.push(this)}get logLevel(){return this._logLevel}set logLevel(t){if(!(t in p))throw new TypeError(`Invalid value "${t}" assigned to \`logLevel\``);this._logLevel=t}setLogLevel(t){this._logLevel="string"==typeof t?m[t]:t}get logHandler(){return this._logHandler}set logHandler(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t}get userLogHandler(){return this._userLogHandler}set userLogHandler(t){this._userLogHandler=t}debug(...t){this._userLogHandler&&this._userLogHandler(this,p.DEBUG,...t),this._logHandler(this,p.DEBUG,...t)}log(...t){this._userLogHandler&&this._userLogHandler(this,p.VERBOSE,...t),this._logHandler(this,p.VERBOSE,...t)}info(...t){this._userLogHandler&&this._userLogHandler(this,p.INFO,...t),this._logHandler(this,p.INFO,...t)}warn(...t){this._userLogHandler&&this._userLogHandler(this,p.WARN,...t),this._logHandler(this,p.WARN,...t)}error(...t){this._userLogHandler&&this._userLogHandler(this,p.ERROR,...t),this._logHandler(this,p.ERROR,...t)}}class b{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const T="@firebase/app",I="0.7.11",A=new E("@firebase/app"),S={[T]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},C=new Map,N=new Map;function k(t,e){try{t.container.addComponent(e)}catch(n){A.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function D(t){const e=t.name;if(N.has(e))return A.debug(`There were multiple attempts to register component ${e}.`),!1;N.set(e,t);for(const e of C.values())k(e,t);return!0}const R=new s("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class _{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new c("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw R.create("app-deleted",{appName:this._name})}}function L(t,e,n){var i;let s=null!==(i=S[t])&&void 0!==i?i:t;n&&(s+=`-${n}`);const r=s.match(/\s|\//),o=e.match(/\s|\//);if(r||o){const t=[`Unable to register library "${s}" with version "${e}":`];return r&&t.push(`library name "${s}" contains illegal characters (whitespace or "/")`),r&&o&&t.push("and"),o&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void A.warn(t.join(" "))}D(new c(`${s}-version`,(()=>({library:s,version:e})),"VERSION"))}D(new c("platform-logger",(t=>new b(t)),"PRIVATE")),L(T,I,""),L(T,I,"esm2017"),L("fire-js",""),L("firebase","9.6.1","app");var O,P="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t.g?t.g:"undefined"!=typeof self?self:{},x={},M=M||{},V=P||self;function F(){}function U(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function j(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var B="closure_uid_"+(1e9*Math.random()>>>0),$=0;function H(t,e,n){return t.call.apply(t.bind,arguments)}function q(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function G(t,e,n){return(G=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?H:q).apply(null,arguments)}function K(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function z(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,i){for(var s=Array(arguments.length-2),r=2;r<arguments.length;r++)s[r-2]=arguments[r];return e.prototype[n].apply(t,s)}}function X(){this.s=this.s,this.o=this.o}var Q={};X.prototype.s=!1,X.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,B)&&t[B]||(t[B]=++$)}(this);delete Q[t]}},X.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const W=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(let n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},J=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){const i=t.length,s="string"==typeof t?t.split(""):t;for(let r=0;r<i;r++)r in s&&e.call(n,s[r],r,t)};function Y(t){return Array.prototype.concat.apply([],arguments)}function Z(t){const e=t.length;if(0<e){const n=Array(e);for(let i=0;i<e;i++)n[i]=t[i];return n}return[]}function tt(t){return/^[\s\xa0]*$/.test(t)}var et,nt=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function it(t,e){return-1!=t.indexOf(e)}function st(t,e){return t<e?-1:t>e?1:0}t:{var rt=V.navigator;if(rt){var ot=rt.userAgent;if(ot){et=ot;break t}}et=""}function at(t,e,n){for(const i in t)e.call(n,t[i],i,t)}function ht(t){const e={};for(const n in t)e[n]=t[n];return e}var ct="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function lt(t,e){let n,i;for(let e=1;e<arguments.length;e++){for(n in i=arguments[e],i)t[n]=i[n];for(let e=0;e<ct.length;e++)n=ct[e],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function ut(t){return ut[" "](t),t}ut[" "]=F;var ft,dt,pt=it(et,"Opera"),gt=it(et,"Trident")||it(et,"MSIE"),mt=it(et,"Edge"),yt=mt||gt,vt=it(et,"Gecko")&&!(it(et.toLowerCase(),"webkit")&&!it(et,"Edge"))&&!(it(et,"Trident")||it(et,"MSIE"))&&!it(et,"Edge"),wt=it(et.toLowerCase(),"webkit")&&!it(et,"Edge");function Et(){var t=V.document;return t?t.documentMode:void 0}t:{var bt="",Tt=(dt=et,vt?/rv:([^\);]+)(\)|;)/.exec(dt):mt?/Edge\/([\d\.]+)/.exec(dt):gt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(dt):wt?/WebKit\/(\S+)/.exec(dt):pt?/(?:Version)[ \/]?(\S+)/.exec(dt):void 0);if(Tt&&(bt=Tt?Tt[1]:""),gt){var It=Et();if(null!=It&&It>parseFloat(bt)){ft=String(It);break t}}ft=bt}var At,St={};function Ct(){return t=St,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){let t=0;const e=nt(String(ft)).split("."),n=nt("9").split("."),i=Math.max(e.length,n.length);for(let o=0;0==t&&o<i;o++){var s=e[o]||"",r=n[o]||"";do{if(s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],r=/(\d*)(\D*)(.*)/.exec(r)||["","","",""],0==s[0].length&&0==r[0].length)break;t=st(0==s[1].length?0:parseInt(s[1],10),0==r[1].length?0:parseInt(r[1],10))||st(0==s[2].length,0==r[2].length)||st(s[2],r[2]),s=s[3],r=r[3]}while(0==t)}return 0<=t}();var t}V.document&&gt?At=Et()||parseInt(ft,10)||void 0:At=void 0;var Nt=At,kt=function(){if(!V.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{V.addEventListener("test",F,e),V.removeEventListener("test",F,e)}catch(t){}return t}();function Dt(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function Rt(t,e){if(Dt.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,i=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(vt){t:{try{ut(e.nodeName);var s=!0;break t}catch(t){}s=!1}s||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,i?(this.clientX=void 0!==i.clientX?i.clientX:i.pageX,this.clientY=void 0!==i.clientY?i.clientY:i.pageY,this.screenX=i.screenX||0,this.screenY=i.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:_t[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&Rt.Z.h.call(this)}}Dt.prototype.h=function(){this.defaultPrevented=!0},z(Rt,Dt);var _t={2:"touch",3:"pen",4:"mouse"};Rt.prototype.h=function(){Rt.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var Lt="closure_listenable_"+(1e6*Math.random()|0),Ot=0;function Pt(t,e,n,i,s){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!i,this.ia=s,this.key=++Ot,this.ca=this.fa=!1}function xt(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function Mt(t){this.src=t,this.g={},this.h=0}function Vt(t,e){var n=e.type;if(n in t.g){var i,s=t.g[n],r=W(s,e);(i=0<=r)&&Array.prototype.splice.call(s,r,1),i&&(xt(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function Ft(t,e,n,i){for(var s=0;s<t.length;++s){var r=t[s];if(!r.ca&&r.listener==e&&r.capture==!!n&&r.ia==i)return s}return-1}Mt.prototype.add=function(t,e,n,i,s){var r=t.toString();(t=this.g[r])||(t=this.g[r]=[],this.h++);var o=Ft(t,e,i,s);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new Pt(e,this.src,r,!!i,s)).fa=n,t.push(e)),e};var Ut="closure_lm_"+(1e6*Math.random()|0),jt={};function Bt(t,e,n,i,s){if(i&&i.once)return Ht(t,e,n,i,s);if(Array.isArray(e)){for(var r=0;r<e.length;r++)Bt(t,e[r],n,i,s);return null}return n=Wt(n),t&&t[Lt]?t.N(e,n,j(i)?!!i.capture:!!i,s):$t(t,e,n,!1,i,s)}function $t(t,e,n,i,s,r){if(!e)throw Error("Invalid event type");var o=j(s)?!!s.capture:!!s,a=Xt(t);if(a||(t[Ut]=a=new Mt(t)),(n=a.add(e,n,i,o,r)).proxy)return n;if(i=function(){var t=zt;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)kt||(s=o),void 0===s&&(s=!1),t.addEventListener(e.toString(),i,s);else if(t.attachEvent)t.attachEvent(Kt(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}return n}function Ht(t,e,n,i,s){if(Array.isArray(e)){for(var r=0;r<e.length;r++)Ht(t,e[r],n,i,s);return null}return n=Wt(n),t&&t[Lt]?t.O(e,n,j(i)?!!i.capture:!!i,s):$t(t,e,n,!0,i,s)}function qt(t,e,n,i,s){if(Array.isArray(e))for(var r=0;r<e.length;r++)qt(t,e[r],n,i,s);else i=j(i)?!!i.capture:!!i,n=Wt(n),t&&t[Lt]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=Ft(r=t.g[e],n,i,s))&&(xt(r[n]),Array.prototype.splice.call(r,n,1),0==r.length&&(delete t.g[e],t.h--))):t&&(t=Xt(t))&&(e=t.g[e.toString()],t=-1,e&&(t=Ft(e,n,i,s)),(n=-1<t?e[t]:null)&&Gt(n))}function Gt(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[Lt])Vt(e.i,t);else{var n=t.type,i=t.proxy;e.removeEventListener?e.removeEventListener(n,i,t.capture):e.detachEvent?e.detachEvent(Kt(n),i):e.addListener&&e.removeListener&&e.removeListener(i),(n=Xt(e))?(Vt(n,t),0==n.h&&(n.src=null,e[Ut]=null)):xt(t)}}}function Kt(t){return t in jt?jt[t]:jt[t]="on"+t}function zt(t,e){if(t.ca)t=!0;else{e=new Rt(e,this);var n=t.listener,i=t.ia||t.src;t.fa&&Gt(t),t=n.call(i,e)}return t}function Xt(t){return(t=t[Ut])instanceof Mt?t:null}var Qt="__closure_events_fn_"+(1e9*Math.random()>>>0);function Wt(t){return"function"==typeof t?t:(t[Qt]||(t[Qt]=function(e){return t.handleEvent(e)}),t[Qt])}function Jt(){X.call(this),this.i=new Mt(this),this.P=this,this.I=null}function Yt(t,e){var n,i=t.I;if(i)for(n=[];i;i=i.I)n.push(i);if(t=t.P,i=e.type||e,"string"==typeof e)e=new Dt(e,t);else if(e instanceof Dt)e.target=e.target||t;else{var s=e;lt(e=new Dt(i,t),s)}if(s=!0,n)for(var r=n.length-1;0<=r;r--){var o=e.g=n[r];s=Zt(o,i,!0,e)&&s}if(s=Zt(o=e.g=t,i,!0,e)&&s,s=Zt(o,i,!1,e)&&s,n)for(r=0;r<n.length;r++)s=Zt(o=e.g=n[r],i,!1,e)&&s}function Zt(t,e,n,i){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var s=!0,r=0;r<e.length;++r){var o=e[r];if(o&&!o.ca&&o.capture==n){var a=o.listener,h=o.ia||o.src;o.fa&&Vt(t.i,o),s=!1!==a.call(h,i)&&s}}return s&&!i.defaultPrevented}z(Jt,X),Jt.prototype[Lt]=!0,Jt.prototype.removeEventListener=function(t,e,n,i){qt(this,t,e,n,i)},Jt.prototype.M=function(){if(Jt.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],i=0;i<n.length;i++)xt(n[i]);delete e.g[t],e.h--}}this.I=null},Jt.prototype.N=function(t,e,n,i){return this.i.add(String(t),e,!1,n,i)},Jt.prototype.O=function(t,e,n,i){return this.i.add(String(t),e,!0,n,i)};var te=V.JSON.stringify;function ee(){var t=he;let e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var ne,ie=new class{constructor(t,e){this.i=t,this.j=e,this.h=0,this.g=null}get(){let t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t}}((()=>new se),(t=>t.reset()));class se{constructor(){this.next=this.g=this.h=null}set(t,e){this.h=t,this.g=e,this.next=null}reset(){this.next=this.g=this.h=null}}function re(t){V.setTimeout((()=>{throw t}),0)}function oe(t,e){ne||function(){var t=V.Promise.resolve(void 0);ne=function(){t.then(ce)}}(),ae||(ne(),ae=!0),he.add(t,e)}var ae=!1,he=new class{constructor(){this.h=this.g=null}add(t,e){const n=ie.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n}};function ce(){for(var t;t=ee();){try{t.h.call(t.g)}catch(t){re(t)}var e=ie;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}ae=!1}function le(t,e){Jt.call(this),this.h=t||1,this.g=e||V,this.j=G(this.kb,this),this.l=Date.now()}function ue(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function fe(t,e,n){if("function"==typeof t)n&&(t=G(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=G(t.handleEvent,t)}return 2147483647<Number(e)?-1:V.setTimeout(t,e||0)}function de(t){t.g=fe((()=>{t.g=null,t.i&&(t.i=!1,de(t))}),t.j);const e=t.h;t.h=null,t.m.apply(null,e)}z(le,Jt),(O=le.prototype).da=!1,O.S=null,O.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),Yt(this,"tick"),this.da&&(ue(this),this.start()))}},O.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},O.M=function(){le.Z.M.call(this),ue(this),delete this.g};class pe extends X{constructor(t,e){super(),this.m=t,this.j=e,this.h=null,this.i=!1,this.g=null}l(t){this.h=arguments,this.g?this.i=!0:de(this)}M(){super.M(),this.g&&(V.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function ge(t){X.call(this),this.h=t,this.g={}}z(ge,X);var me=[];function ye(t,e,n,i){Array.isArray(n)||(n&&(me[0]=n.toString()),n=me);for(var s=0;s<n.length;s++){var r=Bt(e,n[s],i||t.handleEvent,!1,t.h||t);if(!r)break;t.g[r.key]=r}}function ve(t){at(t.g,(function(t,e){this.g.hasOwnProperty(e)&&Gt(t)}),t),t.g={}}function we(){this.g=!0}function Ee(t,e,n,i){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var i=n[t];if(!(2>i.length)){var s=i[1];if(Array.isArray(s)&&!(1>s.length)){var r=s[0];if("noop"!=r&&"stop"!=r&&"close"!=r)for(var o=1;o<s.length;o++)s[o]=""}}}return te(n)}catch(t){return e}}(t,n)+(i?" "+i:"")}))}ge.prototype.M=function(){ge.Z.M.call(this),ve(this)},ge.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},we.prototype.Aa=function(){this.g=!1},we.prototype.info=function(){};var be={},Te=null;function Ie(){return Te=Te||new Jt}function Ae(t){Dt.call(this,be.Ma,t)}function Se(t){const e=Ie();Yt(e,new Ae(e,t))}function Ce(t,e){Dt.call(this,be.STAT_EVENT,t),this.stat=e}function Ne(t){const e=Ie();Yt(e,new Ce(e,t))}function ke(t,e){Dt.call(this,be.Na,t),this.size=e}function De(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return V.setTimeout((function(){t()}),e)}be.Ma="serverreachability",z(Ae,Dt),be.STAT_EVENT="statevent",z(Ce,Dt),be.Na="timingevent",z(ke,Dt);var Re={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},_e={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function Le(){}function Oe(t){return t.h||(t.h=t.i())}function Pe(){}Le.prototype.h=null;var xe,Me={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function Ve(){Dt.call(this,"d")}function Fe(){Dt.call(this,"c")}function Ue(){}function je(t,e,n,i){this.l=t,this.j=e,this.m=n,this.X=i||1,this.V=new ge(this),this.P=$e,t=yt?125:void 0,this.W=new le(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new Be}function Be(){this.i=null,this.g="",this.h=!1}z(Ve,Dt),z(Fe,Dt),z(Ue,Le),Ue.prototype.g=function(){return new XMLHttpRequest},Ue.prototype.i=function(){return{}},xe=new Ue;var $e=45e3,He={},qe={};function Ge(t,e,n){t.K=1,t.v=gn(cn(e)),t.s=n,t.U=!0,Ke(t,null)}function Ke(t,e){t.F=Date.now(),We(t),t.A=cn(t.v);var n=t.A,i=t.X;Array.isArray(i)||(i=[String(i)]),kn(n.h,"t",i),t.C=0,n=t.l.H,t.h=new Be,t.g=ki(t.l,n?e:null,!t.s),0<t.O&&(t.L=new pe(G(t.Ia,t,t.g),t.O)),ye(t.V,t.g,"readystatechange",t.gb),e=t.H?ht(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),Se(1),function(t,e,n,i,s,r){t.info((function(){if(t.g)if(r)for(var o="",a=r.split("&"),h=0;h<a.length;h++){var c=a[h].split("=");if(1<c.length){var l=c[0];c=c[1];var u=l.split("_");o=2<=u.length&&"type"==u[1]?o+(l+"=")+c+"&":o+(l+"=redacted&")}}else o=null;else o=r;return"XMLHTTP REQ ("+i+") [attempt "+s+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function ze(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function Xe(t,e,n){let i,s=!0;for(;!t.I&&t.C<n.length;){if(i=Qe(t,n),i==qe){4==e&&(t.o=4,Ne(14),s=!1),Ee(t.j,t.m,null,"[Incomplete Response]");break}if(i==He){t.o=4,Ne(15),Ee(t.j,t.m,n,"[Invalid Chunk]"),s=!1;break}Ee(t.j,t.m,i,null),en(t,i)}ze(t)&&i!=qe&&i!=He&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,Ne(16),s=!1),t.i=t.i&&s,s?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Ei(e),e.L=!0,Ne(11))):(Ee(t.j,t.m,n,"[Invalid Chunked Response]"),tn(t),Ze(t))}function Qe(t,e){var n=t.C,i=e.indexOf("\n",n);return-1==i?qe:(n=Number(e.substring(n,i)),isNaN(n)?He:(i+=1)+n>e.length?qe:(e=e.substr(i,n),t.C=i+n,e))}function We(t){t.Y=Date.now()+t.P,Je(t,t.P)}function Je(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=De(G(t.eb,t),e)}function Ye(t){t.B&&(V.clearTimeout(t.B),t.B=null)}function Ze(t){0==t.l.G||t.I||Ii(t.l,t)}function tn(t){Ye(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,ue(t.W),ve(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function en(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||Pn(n.i,t)))if(n.I=t.N,!t.J&&Pn(n.i,t)&&3==n.G){try{var i=n.Ca.g.parse(e)}catch(t){i=null}if(Array.isArray(i)&&3==i.length){var s=i;if(0==s[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Ti(n),ui(n)}wi(n),Ne(18)}}else n.ta=s[1],0<n.ta-n.U&&37500>s[2]&&n.N&&0==n.A&&!n.v&&(n.v=De(G(n.ab,n),6e3));if(1>=On(n.i)&&n.ka){try{n.ka()}catch(t){}n.ka=void 0}}else Si(n,11)}else if((t.J||n.g==t)&&Ti(n),!tt(e))for(s=n.Ca.g.parse(e),e=0;e<s.length;e++){let c=s[e];if(n.U=c[0],c=c[1],2==n.G)if("c"==c[0]){n.J=c[1],n.la=c[2];const e=c[3];null!=e&&(n.ma=e,n.h.info("VER="+n.ma));const s=c[4];null!=s&&(n.za=s,n.h.info("SVER="+n.za));const l=c[5];null!=l&&"number"==typeof l&&0<l&&(i=1.5*l,n.K=i,n.h.info("backChannelRequestTimeoutMs_="+i)),i=n;const u=t.g;if(u){const t=u.g?u.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(t){var r=i.i;!r.g&&(it(t,"spdy")||it(t,"quic")||it(t,"h2"))&&(r.j=r.l,r.g=new Set,r.h&&(xn(r,r.h),r.h=null))}if(i.D){const t=u.g?u.g.getResponseHeader("X-HTTP-Session-Id"):null;t&&(i.sa=t,pn(i.F,i.D,t))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var o=t;if((i=n).oa=Ni(i,i.H?i.la:null,i.W),o.J){Mn(i.i,o);var a=o,h=i.K;h&&a.setTimeout(h),a.B&&(Ye(a),We(a)),i.g=o}else vi(i);0<n.l.length&&pi(n)}else"stop"!=c[0]&&"close"!=c[0]||Si(n,7);else 3==n.G&&("stop"==c[0]||"close"==c[0]?"stop"==c[0]?Si(n,7):li(n):"noop"!=c[0]&&n.j&&n.j.wa(c),n.A=0)}Se(4)}catch(t){}}function nn(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(U(t)||"string"==typeof t)J(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(U(t)||"string"==typeof t){n=[];for(var i=t.length,s=0;s<i;s++)n.push(s)}else for(s in n=[],i=0,t)n[i++]=s;i=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(U(t)){for(var e=[],n=t.length,i=0;i<n;i++)e.push(t[i]);return e}for(i in e=[],n=0,t)e[n++]=t[i];return e}(t),s=i.length;for(var r=0;r<s;r++)e.call(void 0,i[r],n&&n[r],t)}}function sn(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var i=0;i<n;i+=2)this.set(arguments[i],arguments[i+1])}else if(t)if(t instanceof sn)for(n=t.T(),i=0;i<n.length;i++)this.set(n[i],t.get(n[i]));else for(i in t)this.set(i,t[i])}function rn(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var i=t.g[e];on(t.h,i)&&(t.g[n++]=i),e++}t.g.length=n}if(t.i!=t.g.length){var s={};for(n=e=0;e<t.g.length;)on(s,i=t.g[e])||(t.g[n++]=i,s[i]=1),e++;t.g.length=n}}function on(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(O=je.prototype).setTimeout=function(t){this.P=t},O.gb=function(t){t=t.target;const e=this.L;e&&3==ri(t)?e.l():this.Ia(t)},O.Ia=function(t){try{if(t==this.g)t:{const l=ri(this.g);var e=this.g.Da();const u=this.g.ba();if(!(3>l)&&(3!=l||yt||this.g&&(this.h.h||this.g.ga()||oi(this.g)))){this.I||4!=l||7==e||Se(8==e||0>=u?3:2),Ye(this);var n=this.g.ba();this.N=n;e:if(ze(this)){var i=oi(this.g);t="";var s=i.length,r=4==ri(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){tn(this),Ze(this);var o="";break e}this.h.i=new V.TextDecoder}for(e=0;e<s;e++)this.h.h=!0,t+=this.h.i.decode(i[e],{stream:r&&e==s-1});i.splice(0,s),this.h.g+=t,this.C=0,o=this.h.g}else o=this.g.ga();if(this.i=200==n,function(t,e,n,i,s,r,o){t.info((function(){return"XMLHTTP RESP ("+i+") [ attempt "+s+"]: "+e+"\n"+n+"\n"+r+" "+o}))}(this.j,this.u,this.A,this.m,this.X,l,n),this.i){if(this.$&&!this.J){e:{if(this.g){var a,h=this.g;if((a=h.g?h.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!tt(a)){var c=a;break e}}c=null}if(!(n=c)){this.i=!1,this.o=3,Ne(12),tn(this),Ze(this);break t}Ee(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,en(this,n)}this.U?(Xe(this,l,o),yt&&this.i&&3==l&&(ye(this.V,this.W,"tick",this.fb),this.W.start())):(Ee(this.j,this.m,o,null),en(this,o)),4==l&&tn(this),this.i&&!this.I&&(4==l?Ii(this.l,this):(this.i=!1,We(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,Ne(12)):(this.o=0,Ne(13)),tn(this),Ze(this)}}}catch(t){}},O.fb=function(){if(this.g){var t=ri(this.g),e=this.g.ga();this.C<e.length&&(Ye(this),Xe(this,t,e),this.i&&4!=t&&We(this))}},O.cancel=function(){this.I=!0,tn(this)},O.eb=function(){this.B=null;const t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(Se(3),Ne(17)),tn(this),this.o=2,Ze(this)):Je(this,this.Y-t)},(O=sn.prototype).R=function(){rn(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},O.T=function(){return rn(this),this.g.concat()},O.get=function(t,e){return on(this.h,t)?this.h[t]:e},O.set=function(t,e){on(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},O.forEach=function(t,e){for(var n=this.T(),i=0;i<n.length;i++){var s=n[i],r=this.get(s);t.call(e,r,s,this)}};var an=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function hn(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof hn){this.g=void 0!==e?e:t.g,ln(this,t.j),this.s=t.s,un(this,t.i),fn(this,t.m),this.l=t.l,e=t.h;var n=new An;n.i=e.i,e.g&&(n.g=new sn(e.g),n.h=e.h),dn(this,n),this.o=t.o}else t&&(n=String(t).match(an))?(this.g=!!e,ln(this,n[1]||"",!0),this.s=mn(n[2]||""),un(this,n[3]||"",!0),fn(this,n[4]),this.l=mn(n[5]||"",!0),dn(this,n[6]||"",!0),this.o=mn(n[7]||"")):(this.g=!!e,this.h=new An(null,this.g))}function cn(t){return new hn(t)}function ln(t,e,n){t.j=n?mn(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function un(t,e,n){t.i=n?mn(e,!0):e}function fn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function dn(t,e,n){e instanceof An?(t.h=e,function(t,e){e&&!t.j&&(Sn(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(Cn(this,e),kn(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=yn(e,Tn)),t.h=new An(e,t.g))}function pn(t,e,n){t.h.set(e,n)}function gn(t){return pn(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function mn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function yn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,vn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function vn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}hn.prototype.toString=function(){var t=[],e=this.j;e&&t.push(yn(e,wn,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(yn(e,wn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(yn(n,"/"==n.charAt(0)?bn:En,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",yn(n,In)),t.join("")};var wn=/[#\/\?@]/g,En=/[#\?:]/g,bn=/[#\?]/g,Tn=/[#\?@]/g,In=/#/g;function An(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function Sn(t){t.g||(t.g=new sn,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var i=t[n].indexOf("="),s=null;if(0<=i){var r=t[n].substring(0,i);s=t[n].substring(i+1)}else r=t[n];e(r,s?decodeURIComponent(s.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Cn(t,e){Sn(t),e=Dn(t,e),on(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,on((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&rn(t)))}function Nn(t,e){return Sn(t),e=Dn(t,e),on(t.g.h,e)}function kn(t,e,n){Cn(t,e),0<n.length&&(t.i=null,t.g.set(Dn(t,e),Z(n)),t.h+=n.length)}function Dn(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}function Rn(t){this.l=t||_n,t=V.PerformanceNavigationTiming?0<(t=V.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(V.g&&V.g.Ea&&V.g.Ea()&&V.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(O=An.prototype).add=function(t,e){Sn(this),this.i=null,t=Dn(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},O.forEach=function(t,e){Sn(this),this.g.forEach((function(n,i){J(n,(function(n){t.call(e,n,i,this)}),this)}),this)},O.T=function(){Sn(this);for(var t=this.g.R(),e=this.g.T(),n=[],i=0;i<e.length;i++)for(var s=t[i],r=0;r<s.length;r++)n.push(e[i]);return n},O.R=function(t){Sn(this);var e=[];if("string"==typeof t)Nn(this,t)&&(e=Y(e,this.g.get(Dn(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=Y(e,t[n])}return e},O.set=function(t,e){return Sn(this),this.i=null,Nn(this,t=Dn(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},O.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},O.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var i=e[n],s=encodeURIComponent(String(i));i=this.R(i);for(var r=0;r<i.length;r++){var o=s;""!==i[r]&&(o+="="+encodeURIComponent(String(i[r]))),t.push(o)}}return this.i=t.join("&")};var _n=10;function Ln(t){return!!t.h||!!t.g&&t.g.size>=t.j}function On(t){return t.h?1:t.g?t.g.size:0}function Pn(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function xn(t,e){t.g?t.g.add(e):t.h=e}function Mn(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function Vn(t){if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){let e=t.i;for(const n of t.g.values())e=e.concat(n.D);return e}return Z(t.i)}function Fn(){}function Un(){this.g=new Fn}function jn(t,e,n){const i=n||"";try{nn(t,(function(t,n){let s=t;j(t)&&(s=te(t)),e.push(i+n+"="+encodeURIComponent(s))}))}catch(t){throw e.push(i+"type="+encodeURIComponent("_badmap")),t}}function Bn(t,e,n,i,s){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,s(i)}catch(t){}}function $n(t){this.l=t.$b||null,this.j=t.ib||!1}function Hn(t,e){Jt.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=qn,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}Rn.prototype.cancel=function(){if(this.i=Vn(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const t of this.g.values())t.cancel();this.g.clear()}},Fn.prototype.stringify=function(t){return V.JSON.stringify(t,void 0)},Fn.prototype.parse=function(t){return V.JSON.parse(t,void 0)},z($n,Le),$n.prototype.g=function(){return new Hn(this.l,this.j)},$n.prototype.i=function(t){return function(){return t}}({}),z(Hn,Jt);var qn=0;function Gn(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function Kn(t){t.readyState=4,t.l=null,t.j=null,t.A=null,zn(t)}function zn(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(O=Hn.prototype).open=function(t,e){if(this.readyState!=qn)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,zn(this)},O.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||V).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},O.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,Kn(this)),this.readyState=qn},O.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,zn(this)),this.g&&(this.readyState=3,zn(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==V.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;Gn(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},O.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?Kn(this):zn(this),3==this.readyState&&Gn(this)}},O.Ua=function(t){this.g&&(this.response=this.responseText=t,Kn(this))},O.Ta=function(t){this.g&&(this.response=t,Kn(this))},O.ha=function(){this.g&&Kn(this)},O.setRequestHeader=function(t,e){this.v.append(t,e)},O.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},O.getAllResponseHeaders=function(){if(!this.h)return"";const t=[],e=this.h.entries();for(var n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(Hn.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var Xn=V.JSON.parse;function Qn(t){Jt.call(this),this.headers=new sn,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=Wn,this.K=this.L=!1}z(Qn,Jt);var Wn="",Jn=/^https?$/i,Yn=["POST","PUT"];function Zn(t){return"content-type"==t.toLowerCase()}function ti(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,ei(t),ii(t)}function ei(t){t.D||(t.D=!0,Yt(t,"complete"),Yt(t,"error"))}function ni(t){if(t.h&&void 0!==M&&(!t.C[1]||4!=ri(t)||2!=t.ba()))if(t.v&&4==ri(t))fe(t.Fa,0,t);else if(Yt(t,"readystatechange"),4==ri(t)){t.h=!1;try{const a=t.ba();t:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var e=!0;break t;default:e=!1}var n;if(!(n=e)){var i;if(i=0===a){var s=String(t.H).match(an)[1]||null;if(!s&&V.self&&V.self.location){var r=V.self.location.protocol;s=r.substr(0,r.length-1)}i=!Jn.test(s?s.toLowerCase():"")}n=i}if(n)Yt(t,"complete"),Yt(t,"success");else{t.m=6;try{var o=2<ri(t)?t.g.statusText:""}catch(t){o=""}t.j=o+" ["+t.ba()+"]",ei(t)}}finally{ii(t)}}}function ii(t,e){if(t.g){si(t);const n=t.g,i=t.C[0]?F:null;t.g=null,t.C=null,e||Yt(t,"ready");try{n.onreadystatechange=i}catch(t){}}}function si(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(V.clearTimeout(t.A),t.A=null)}function ri(t){return t.g?t.g.readyState:0}function oi(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case Wn:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function ai(t,e,n){t:{for(i in n){var i=!1;break t}i=!0}i||(n=function(t){let e="";return at(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):pn(t,e,n))}function hi(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function ci(t){this.za=0,this.l=[],this.h=new we,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=hi("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=hi("baseRetryDelayMs",5e3,t),this.$a=hi("retryDelaySeedMs",1e4,t),this.Ya=hi("forwardChannelMaxRetries",2,t),this.ra=hi("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new Rn(t&&t.concurrentRequestLimit),this.Ca=new Un,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function li(t){if(fi(t),3==t.G){var e=t.V++,n=cn(t.F);pn(n,"SID",t.J),pn(n,"RID",e),pn(n,"TYPE","terminate"),mi(t,n),(e=new je(t,t.h,e,void 0)).K=2,e.v=gn(cn(n)),n=!1,V.navigator&&V.navigator.sendBeacon&&(n=V.navigator.sendBeacon(e.v.toString(),"")),!n&&V.Image&&((new Image).src=e.v,n=!0),n||(e.g=ki(e.l,null),e.g.ea(e.v)),e.F=Date.now(),We(e)}Ci(t)}function ui(t){t.g&&(Ei(t),t.g.cancel(),t.g=null)}function fi(t){ui(t),t.u&&(V.clearTimeout(t.u),t.u=null),Ti(t),t.i.cancel(),t.m&&("number"==typeof t.m&&V.clearTimeout(t.m),t.m=null)}function di(t,e){t.l.push(new class{constructor(t,e){this.h=t,this.g=e}}(t.Za++,e)),3==t.G&&pi(t)}function pi(t){Ln(t.i)||t.m||(t.m=!0,oe(t.Ha,t),t.C=0)}function gi(t,e){var n;n=e?e.m:t.V++;const i=cn(t.F);pn(i,"SID",t.J),pn(i,"RID",n),pn(i,"AID",t.U),mi(t,i),t.o&&t.s&&ai(i,t.o,t.s),n=new je(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=yi(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),xn(t.i,n),Ge(n,i,e)}function mi(t,e){t.j&&nn({},(function(t,n){pn(e,n,t)}))}function yi(t,e,n){n=Math.min(t.l.length,n);var i=t.j?G(t.j.Oa,t.j,t):null;t:{var s=t.l;let e=-1;for(;;){const t=["count="+n];-1==e?0<n?(e=s[0].h,t.push("ofs="+e)):e=0:t.push("ofs="+e);let r=!0;for(let o=0;o<n;o++){let n=s[o].h;const a=s[o].g;if(n-=e,0>n)e=Math.max(0,s[o].h-100),r=!1;else try{jn(a,t,"req"+n+"_")}catch(t){i&&i(a)}}if(r){i=t.join("&");break t}}}return t=t.l.splice(0,n),e.D=t,i}function vi(t){t.g||t.u||(t.Y=1,oe(t.Ga,t),t.A=0)}function wi(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=De(G(t.Ga,t),Ai(t,t.A)),t.A++,0))}function Ei(t){null!=t.B&&(V.clearTimeout(t.B),t.B=null)}function bi(t){t.g=new je(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=cn(t.oa);pn(e,"RID","rpc"),pn(e,"SID",t.J),pn(e,"CI",t.N?"0":"1"),pn(e,"AID",t.U),mi(t,e),pn(e,"TYPE","xmlhttp"),t.o&&t.s&&ai(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=gn(cn(e)),n.s=null,n.U=!0,Ke(n,t)}function Ti(t){null!=t.v&&(V.clearTimeout(t.v),t.v=null)}function Ii(t,e){var n=null;if(t.g==e){Ti(t),Ei(t),t.g=null;var i=2}else{if(!Pn(t.i,e))return;n=e.D,Mn(t.i,e),i=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==i){n=e.s?e.s.length:0,e=Date.now()-e.F;var s=t.C;Yt(i=Ie(),new ke(i,n,e,s)),pi(t)}else vi(t);else if(3==(s=e.o)||0==s&&0<t.I||!(1==i&&function(t,e){return!(On(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=De(G(t.Ha,t,e),Ai(t,t.C)),t.C++,0)))}(t,e)||2==i&&wi(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),s){case 1:Si(t,5);break;case 4:Si(t,10);break;case 3:Si(t,6);break;default:Si(t,2)}}function Ai(t,e){let n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function Si(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var i=G(t.jb,t);n||(n=new hn("//www.google.com/images/cleardot.gif"),V.location&&"http"==V.location.protocol||ln(n,"https"),gn(n)),function(t,e){const n=new we;if(V.Image){const i=new Image;i.onload=K(Bn,n,i,"TestLoadImage: loaded",!0,e),i.onerror=K(Bn,n,i,"TestLoadImage: error",!1,e),i.onabort=K(Bn,n,i,"TestLoadImage: abort",!1,e),i.ontimeout=K(Bn,n,i,"TestLoadImage: timeout",!1,e),V.setTimeout((function(){i.ontimeout&&i.ontimeout()}),1e4),i.src=t}else e(!1)}(n.toString(),i)}else Ne(2);t.G=0,t.j&&t.j.va(e),Ci(t),fi(t)}function Ci(t){t.G=0,t.I=-1,t.j&&(0==Vn(t.i).length&&0==t.l.length||(t.i.i.length=0,Z(t.l),t.l.length=0),t.j.ua())}function Ni(t,e,n){let i=function(t){return t instanceof hn?cn(t):new hn(t,void 0)}(n);if(""!=i.i)e&&un(i,e+"."+i.i),fn(i,i.m);else{const t=V.location;i=function(t,e,n,i){var s=new hn(null,void 0);return t&&ln(s,t),e&&un(s,e),n&&fn(s,n),i&&(s.l=i),s}(t.protocol,e?e+"."+t.hostname:t.hostname,+t.port,n)}return t.aa&&at(t.aa,(function(t,e){pn(i,e,t)})),e=t.D,n=t.sa,e&&n&&pn(i,e,n),pn(i,"VER",t.ma),mi(t,i),i}function ki(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new Qn(new $n({ib:!0})):new Qn(t.qa)).L=t.H,e}function Di(){}function Ri(){if(gt&&!(10<=Number(Nt)))throw Error("Environmental error: no available transport.")}function _i(t,e){Jt.call(this),this.g=new ci(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!tt(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!tt(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new Pi(this)}function Li(t){Ve.call(this);var e=t.__sm__;if(e){t:{for(const n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function Oi(){Fe.call(this),this.status=1}function Pi(t){this.g=t}(O=Qn.prototype).ea=function(t,e,n,i){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():xe.g(),this.C=this.u?Oe(this.u):Oe(xe),this.g.onreadystatechange=G(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void ti(this,t)}t=n||"";const s=new sn(this.headers);i&&nn(i,(function(t,e){s.set(e,t)})),i=function(t){t:{var e=Zn;const n=t.length,i="string"==typeof t?t.split(""):t;for(let s=0;s<n;s++)if(s in i&&e.call(void 0,i[s],s,t)){e=s;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(s.T()),n=V.FormData&&t instanceof V.FormData,!(0<=W(Yn,e))||i||n||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{si(this),0<this.B&&((this.K=function(t){return gt&&Ct()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=G(this.pa,this)):this.A=fe(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){ti(this,t)}},O.pa=function(){void 0!==M&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,Yt(this,"timeout"),this.abort(8))},O.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,Yt(this,"complete"),Yt(this,"abort"),ii(this))},O.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),ii(this,!0)),Qn.Z.M.call(this)},O.Fa=function(){this.s||(this.F||this.v||this.l?ni(this):this.cb())},O.cb=function(){ni(this)},O.ba=function(){try{return 2<ri(this)?this.g.status:-1}catch(t){return-1}},O.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},O.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),Xn(e)}},O.Da=function(){return this.m},O.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(O=ci.prototype).ma=8,O.G=1,O.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},O.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;const s=new je(this,this.h,t,void 0);let r=this.s;if(this.P&&(r?(r=ht(r),lt(r,this.P)):r=this.P),null===this.o&&(s.H=r),this.ja)t:{for(var e=0,n=0;n<this.l.length;n++){var i=this.l[n];if(void 0===(i="__data__"in i.g&&"string"==typeof(i=i.g.__data__)?i.length:void 0))break;if(4096<(e+=i)){e=n;break t}if(4096===e||n===this.l.length-1){e=n+1;break t}}e=1e3}else e=1e3;e=yi(this,s,e),pn(n=cn(this.F),"RID",t),pn(n,"CVER",22),this.D&&pn(n,"X-HTTP-Session-Id",this.D),mi(this,n),this.o&&r&&ai(n,this.o,r),xn(this.i,s),this.Ra&&pn(n,"TYPE","init"),this.ja?(pn(n,"$req",e),pn(n,"SID","null"),s.$=!0,Ge(s,n,null)):Ge(s,n,e),this.G=2}}else 3==this.G&&(t?gi(this,t):0==this.l.length||Ln(this.i)||gi(this))},O.Ga=function(){if(this.u=null,bi(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=De(G(this.bb,this),t)}},O.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,Ne(10),ui(this),bi(this))},O.ab=function(){null!=this.v&&(this.v=null,ui(this),wi(this),Ne(19))},O.jb=function(t){t?(this.h.info("Successfully pinged google.com"),Ne(2)):(this.h.info("Failed to ping google.com"),Ne(1))},(O=Di.prototype).xa=function(){},O.wa=function(){},O.va=function(){},O.ua=function(){},O.Oa=function(){},Ri.prototype.g=function(t,e){return new _i(t,e)},z(_i,Jt),_i.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),oe(G(t.hb,t,e))),Ne(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=Ni(t,null,t.W),pi(t)},_i.prototype.close=function(){li(this.g)},_i.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,di(this.g,e)}else this.v?((e={}).__data__=te(t),di(this.g,e)):di(this.g,t)},_i.prototype.M=function(){this.g.j=null,delete this.j,li(this.g),delete this.g,_i.Z.M.call(this)},z(Li,Ve),z(Oi,Fe),z(Pi,Di),Pi.prototype.xa=function(){Yt(this.g,"a")},Pi.prototype.wa=function(t){Yt(this.g,new Li(t))},Pi.prototype.va=function(t){Yt(this.g,new Oi(t))},Pi.prototype.ua=function(){Yt(this.g,"b")},Ri.prototype.createWebChannel=Ri.prototype.g,_i.prototype.send=_i.prototype.u,_i.prototype.open=_i.prototype.m,_i.prototype.close=_i.prototype.close,Re.NO_ERROR=0,Re.TIMEOUT=8,Re.HTTP_ERROR=6,_e.COMPLETE="complete",Pe.EventType=Me,Me.OPEN="a",Me.CLOSE="b",Me.ERROR="c",Me.MESSAGE="d",Jt.prototype.listen=Jt.prototype.N,Qn.prototype.listenOnce=Qn.prototype.O,Qn.prototype.getLastError=Qn.prototype.La,Qn.prototype.getLastErrorCode=Qn.prototype.Da,Qn.prototype.getStatus=Qn.prototype.ba,Qn.prototype.getResponseJson=Qn.prototype.Qa,Qn.prototype.getResponseText=Qn.prototype.ga,Qn.prototype.send=Qn.prototype.ea;var xi=x.createWebChannelTransport=function(){return new Ri},Mi=x.getStatEventTarget=function(){return Ie()},Vi=x.ErrorCode=Re,Fi=x.EventType=_e,Ui=x.Event=be,ji=x.Stat={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},Bi=x.FetchXmlHttpFactory=$n,$i=x.WebChannel=Pe,Hi=x.XhrIo=Qn;const qi="@firebase/firestore";class Gi{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}Gi.UNAUTHENTICATED=new Gi(null),Gi.GOOGLE_CREDENTIALS=new Gi("google-credentials-uid"),Gi.FIRST_PARTY=new Gi("first-party-uid"),Gi.MOCK_USER=new Gi("mock-user");let Ki="9.6.1";const zi=new E("@firebase/firestore");function Xi(){return zi.logLevel}function Qi(t,...e){if(zi.logLevel<=p.DEBUG){const n=e.map(Yi);zi.debug(`Firestore (${Ki}): ${t}`,...n)}}function Wi(t,...e){if(zi.logLevel<=p.ERROR){const n=e.map(Yi);zi.error(`Firestore (${Ki}): ${t}`,...n)}}function Ji(t,...e){if(zi.logLevel<=p.WARN){const n=e.map(Yi);zi.warn(`Firestore (${Ki}): ${t}`,...n)}}function Yi(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function Zi(t="Unexpected state"){const e=`FIRESTORE (${Ki}) INTERNAL ASSERTION FAILED: `+t;throw Wi(e),new Error(e)}function ts(t,e){t||Zi()}function es(t,e){return t}const ns={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class is extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class ss{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class rs{constructor(t,e){this.user=e,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${t}`)}}class os{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(Gi.UNAUTHENTICATED)))}shutdown(){}}class as{constructor(t){this.t=t,this.currentUser=Gi.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const i=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let s=new ss;this.o=()=>{this.i++,this.currentUser=this.u(),s.resolve(),s=new ss,t.enqueueRetryable((()=>i(this.currentUser)))};const r=()=>{const e=s;t.enqueueRetryable((async()=>{await e.promise,await i(this.currentUser)}))},o=t=>{Qi("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=t,this.auth.addAuthTokenListener(this.o),r()};this.t.onInit((t=>o(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?o(t):(Qi("FirebaseAuthCredentialsProvider","Auth not yet detected"),s.resolve(),s=new ss)}}),0),r()}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(Qi("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(ts("string"==typeof e.accessToken),new rs(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return ts(null===t||"string"==typeof t),new Gi(t)}}class hs{constructor(t,e,n){this.type="FirstParty",this.user=Gi.FIRST_PARTY,this.headers=new Map,this.headers.set("X-Goog-AuthUser",e);const i=t.auth.getAuthHeaderValueForFirstParty([]);i&&this.headers.set("Authorization",i),n&&this.headers.set("X-Goog-Iam-Authorization-Token",n)}}class cs{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new hs(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(Gi.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class ls{constructor(t){this.value=t,this.type="AppCheck",this.headers=new Map,t&&t.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class us{constructor(t){this.g=t,this.forceRefresh=!1,this.appCheck=null}start(t,e){this.o=n=>{t.enqueueRetryable((()=>(t=>(null!=t.error&&Qi("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${t.error.message}`),e(t.token)))(n)))};const n=t=>{Qi("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=t,this.appCheck.addTokenListener(this.o)};this.g.onInit((t=>n(t))),setTimeout((()=>{if(!this.appCheck){const t=this.g.getImmediate({optional:!0});t?n(t):Qi("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const t=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(t).then((t=>t?(ts("string"==typeof t.token),new ls(t.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}class fs{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.p(t),this.T=t=>e.writeSequenceNumber(t))}p(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.T&&this.T(t),t}}function ds(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}fs.I=-1;class ps{static A(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length;let n="";for(;n.length<20;){const i=ds(40);for(let s=0;s<i.length;++s)n.length<20&&i[s]<e&&(n+=t.charAt(i[s]%t.length))}return n}}function gs(t,e){return t<e?-1:t>e?1:0}function ms(t,e,n){return t.length===e.length&&t.every(((t,i)=>n(t,e[i])))}class ys{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new is(ns.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new is(ns.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new is(ns.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new is(ns.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return ys.fromMillis(Date.now())}static fromDate(t){return ys.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new ys(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?gs(this.nanoseconds,t.nanoseconds):gs(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class vs{constructor(t){this.timestamp=t}static fromTimestamp(t){return new vs(t)}static min(){return new vs(new ys(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function ws(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Es(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function bs(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class Ts{constructor(t,e,n){void 0===e?e=0:e>t.length&&Zi(),void 0===n?n=t.length-e:n>t.length-e&&Zi(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===Ts.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof Ts?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let i=0;i<n;i++){const n=t.get(i),s=e.get(i);if(n<s)return-1;if(n>s)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class Is extends Ts{construct(t,e,n){return new Is(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new is(ns.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new Is(e)}static emptyPath(){return new Is([])}}const As=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class Ss extends Ts{construct(t,e,n){return new Ss(t,e,n)}static isValidIdentifier(t){return As.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),Ss.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new Ss(["__name__"])}static fromServerFormat(t){const e=[];let n="",i=0;const s=()=>{if(0===n.length)throw new is(ns.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let r=!1;for(;i<t.length;){const e=t[i];if("\\"===e){if(i+1===t.length)throw new is(ns.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[i+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new is(ns.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,i+=2}else"`"===e?(r=!r,i++):"."!==e||r?(n+=e,i++):(s(),i++)}if(s(),r)throw new is(ns.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new Ss(e)}static emptyPath(){return new Ss([])}}class Cs{constructor(t){this.fields=t,t.sort(Ss.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return ms(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}class Ns{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new Ns(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new Ns(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return gs(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}Ns.EMPTY_BYTE_STRING=new Ns("");const ks=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function Ds(t){if(ts(!!t),"string"==typeof t){let e=0;const n=ks.exec(t);if(ts(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const i=new Date(t);return{seconds:Math.floor(i.getTime()/1e3),nanos:e}}return{seconds:Rs(t.seconds),nanos:Rs(t.nanos)}}function Rs(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function _s(t){return"string"==typeof t?Ns.fromBase64String(t):Ns.fromUint8Array(t)}function Ls(t){const e=Ds(t.mapValue.fields.__local_write_time__.timestampValue);return new ys(e.seconds,e.nanos)}function Os(t){return null==t}function Ps(t){return 0===t&&1/t==-1/0}class xs{constructor(t){this.path=t}static fromPath(t){return new xs(Is.fromString(t))}static fromName(t){return new xs(Is.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===Is.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return Is.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new xs(new Is(t.slice()))}}function Ms(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?function(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}(t)?4:10:Zi()}function Vs(t,e){const n=Ms(t);if(n!==Ms(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return Ls(t).isEqual(Ls(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=Ds(t.timestampValue),i=Ds(e.timestampValue);return n.seconds===i.seconds&&n.nanos===i.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return _s(t.bytesValue).isEqual(_s(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return Rs(t.geoPointValue.latitude)===Rs(e.geoPointValue.latitude)&&Rs(t.geoPointValue.longitude)===Rs(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return Rs(t.integerValue)===Rs(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=Rs(t.doubleValue),i=Rs(e.doubleValue);return n===i?Ps(n)===Ps(i):isNaN(n)&&isNaN(i)}return!1}(t,e);case 9:return ms(t.arrayValue.values||[],e.arrayValue.values||[],Vs);case 10:return function(t,e){const n=t.mapValue.fields||{},i=e.mapValue.fields||{};if(ws(n)!==ws(i))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===i[t]||!Vs(n[t],i[t])))return!1;return!0}(t,e);default:return Zi()}}function Fs(t,e){return void 0!==(t.values||[]).find((t=>Vs(t,e)))}function Us(t,e){const n=Ms(t),i=Ms(e);if(n!==i)return gs(n,i);switch(n){case 0:return 0;case 1:return gs(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=Rs(t.integerValue||t.doubleValue),i=Rs(e.integerValue||e.doubleValue);return n<i?-1:n>i?1:n===i?0:isNaN(n)?isNaN(i)?0:-1:1}(t,e);case 3:return js(t.timestampValue,e.timestampValue);case 4:return js(Ls(t),Ls(e));case 5:return gs(t.stringValue,e.stringValue);case 6:return function(t,e){const n=_s(t),i=_s(e);return n.compareTo(i)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),i=e.split("/");for(let t=0;t<n.length&&t<i.length;t++){const e=gs(n[t],i[t]);if(0!==e)return e}return gs(n.length,i.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=gs(Rs(t.latitude),Rs(e.latitude));return 0!==n?n:gs(Rs(t.longitude),Rs(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],i=e.values||[];for(let t=0;t<n.length&&t<i.length;++t){const e=Us(n[t],i[t]);if(e)return e}return gs(n.length,i.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},i=Object.keys(n),s=e.fields||{},r=Object.keys(s);i.sort(),r.sort();for(let t=0;t<i.length&&t<r.length;++t){const e=gs(i[t],r[t]);if(0!==e)return e;const o=Us(n[i[t]],s[r[t]]);if(0!==o)return o}return gs(i.length,r.length)}(t.mapValue,e.mapValue);default:throw Zi()}}function js(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return gs(t,e);const n=Ds(t),i=Ds(e),s=gs(n.seconds,i.seconds);return 0!==s?s:gs(n.nanos,i.nanos)}function Bs(t){return $s(t)}function $s(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=Ds(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?_s(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,xs.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const i of t.values||[])n?n=!1:e+=",",e+=$s(i);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",i=!0;for(const s of e)i?i=!1:n+=",",n+=`${s}:${$s(t.fields[s])}`;return n+"}"}(t.mapValue):Zi();var e,n}function Hs(t){return!!t&&"integerValue"in t}function qs(t){return!!t&&"arrayValue"in t}function Gs(t){return!!t&&"mapValue"in t}function Ks(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return Es(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=Ks(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=Ks(t.arrayValue.values[n]);return e}return Object.assign({},t)}class zs{constructor(t){this.value=t}static empty(){return new zs({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!Gs(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=Ks(e)}setAll(t){let e=Ss.emptyPath(),n={},i=[];t.forEach(((t,s)=>{if(!e.isImmediateParentOf(s)){const t=this.getFieldsMap(e);this.applyChanges(t,n,i),n={},i=[],e=s.popLast()}t?n[s.lastSegment()]=Ks(t):i.push(s.lastSegment())}));const s=this.getFieldsMap(e);this.applyChanges(s,n,i)}delete(t){const e=this.field(t.popLast());Gs(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return Vs(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let i=e.mapValue.fields[t.get(n)];Gs(i)&&i.mapValue.fields||(i={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=i),e=i}return e.mapValue.fields}applyChanges(t,e,n){Es(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new zs(Ks(this.value))}}function Xs(t){const e=[];return Es(t.fields,((t,n)=>{const i=new Ss([t]);if(Gs(n)){const t=Xs(n.mapValue).fields;if(0===t.length)e.push(i);else for(const n of t)e.push(i.child(n))}else e.push(i)})),new Cs(e)}class Qs{constructor(t,e,n,i,s){this.key=t,this.documentType=e,this.version=n,this.data=i,this.documentState=s}static newInvalidDocument(t){return new Qs(t,0,vs.min(),zs.empty(),0)}static newFoundDocument(t,e,n){return new Qs(t,1,e,n,0)}static newNoDocument(t,e){return new Qs(t,2,e,zs.empty(),0)}static newUnknownDocument(t,e){return new Qs(t,3,e,zs.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=zs.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=zs.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof Qs&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new Qs(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Ws{constructor(t,e=null,n=[],i=[],s=null,r=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=i,this.limit=s,this.startAt=r,this.endAt=o,this.R=null}}function Js(t,e=null,n=[],i=[],s=null,r=null,o=null){return new Ws(t,e,n,i,s,r,o)}function Ys(t){const e=es(t);if(null===e.R){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+Bs(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),Os(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=lr(e.startAt)),e.endAt&&(t+="|ub:",t+=lr(e.endAt)),e.R=t}return e.R}function Zs(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!fr(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let s=0;s<t.filters.length;s++)if(n=t.filters[s],i=e.filters[s],n.op!==i.op||!n.field.isEqual(i.field)||!Vs(n.value,i.value))return!1;var n,i;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!pr(t.startAt,e.startAt)&&pr(t.endAt,e.endAt)}class tr extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.P(t,e,n):new er(t,e,n):"array-contains"===e?new rr(t,n):"in"===e?new or(t,n):"not-in"===e?new ar(t,n):"array-contains-any"===e?new hr(t,n):new tr(t,e,n)}static P(t,e,n){return"in"===e?new nr(t,n):new ir(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.v(Us(e,this.value)):null!==e&&Ms(this.value)===Ms(e)&&this.v(Us(e,this.value))}v(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return Zi()}}V(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class er extends tr{constructor(t,e,n){super(t,e,n),this.key=xs.fromName(n.referenceValue)}matches(t){const e=xs.comparator(t.key,this.key);return this.v(e)}}class nr extends tr{constructor(t,e){super(t,"in",e),this.keys=sr(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class ir extends tr{constructor(t,e){super(t,"not-in",e),this.keys=sr(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function sr(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>xs.fromName(t.referenceValue)))}class rr extends tr{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return qs(e)&&Fs(e.arrayValue,this.value)}}class or extends tr{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&Fs(this.value.arrayValue,e)}}class ar extends tr{constructor(t,e){super(t,"not-in",e)}matches(t){if(Fs(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!Fs(this.value.arrayValue,e)}}class hr extends tr{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!qs(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>Fs(this.value.arrayValue,t)))}}class cr{constructor(t,e){this.position=t,this.before=e}}function lr(t){return`${t.before?"b":"a"}:${t.position.map((t=>Bs(t))).join(",")}`}class ur{constructor(t,e="asc"){this.field=t,this.dir=e}}function fr(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function dr(t,e,n){let i=0;for(let s=0;s<t.position.length;s++){const r=e[s],o=t.position[s];if(i=r.field.isKeyField()?xs.comparator(xs.fromName(o.referenceValue),n.key):Us(o,n.data.field(r.field)),"desc"===r.dir&&(i*=-1),0!==i)break}return t.before?i<=0:i<0}function pr(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!Vs(t.position[n],e.position[n]))return!1;return!0}class gr{constructor(t,e=null,n=[],i=[],s=null,r="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=i,this.limit=s,this.limitType=r,this.startAt=o,this.endAt=a,this.S=null,this.D=null,this.startAt,this.endAt}}function mr(t){const e=es(t);if(null===e.S){e.S=[];const t=function(t){for(const e of t.filters)if(e.V())return e.field;return null}(e),n=function(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}(e);if(null!==t&&null===n)t.isKeyField()||e.S.push(new ur(t)),e.S.push(new ur(Ss.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.S.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.S.push(new ur(Ss.keyField(),t))}}}return e.S}function yr(t){const e=es(t);if(!e.D)if("F"===e.limitType)e.D=Js(e.path,e.collectionGroup,mr(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of mr(e)){const e="desc"===n.dir?"asc":"desc";t.push(new ur(n.field,e))}const n=e.endAt?new cr(e.endAt.position,!e.endAt.before):null,i=e.startAt?new cr(e.startAt.position,!e.startAt.before):null;e.D=Js(e.path,e.collectionGroup,t,e.filters,e.limit,n,i)}return e.D}function vr(t,e){return Zs(yr(t),yr(e))&&t.limitType===e.limitType}function wr(t){return`${Ys(yr(t))}|lt:${t.limitType}`}function Er(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${Bs(e.value)}`;var e})).join(", ")}]`),Os(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+lr(t.startAt)),t.endAt&&(e+=", endAt: "+lr(t.endAt)),`Target(${e})`}(yr(t))}; limitType=${t.limitType})`}function br(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):xs.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!dr(t.startAt,mr(t),e)||t.endAt&&dr(t.endAt,mr(t),e))}(t,e)}function Tr(t,e,n){const i=t.field.isKeyField()?xs.comparator(e.key,n.key):function(t,e,n){const i=e.data.field(t),s=n.data.field(t);return null!==i&&null!==s?Us(i,s):Zi()}(t.field,e,n);switch(t.dir){case"asc":return i;case"desc":return-1*i;default:return Zi()}}function Ir(t,e){if(t.C){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:Ps(e)?"-0":e}}function Ar(t){return{integerValue:""+t}}function Sr(t,e){return function(t){return"number"==typeof t&&Number.isInteger(t)&&!Ps(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}(e)?Ar(e):Ir(t,e)}class Cr{constructor(){this._=void 0}}function Nr(t,e,n){return t instanceof Rr?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof _r?Lr(t,e):t instanceof Or?Pr(t,e):function(t,e){const n=Dr(t,e),i=Mr(n)+Mr(t.N);return Hs(n)&&Hs(t.N)?Ar(i):Ir(t.k,i)}(t,e)}function kr(t,e,n){return t instanceof _r?Lr(t,e):t instanceof Or?Pr(t,e):n}function Dr(t,e){return t instanceof xr?Hs(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class Rr extends Cr{}class _r extends Cr{constructor(t){super(),this.elements=t}}function Lr(t,e){const n=Vr(e);for(const e of t.elements)n.some((t=>Vs(t,e)))||n.push(e);return{arrayValue:{values:n}}}class Or extends Cr{constructor(t){super(),this.elements=t}}function Pr(t,e){let n=Vr(e);for(const e of t.elements)n=n.filter((t=>!Vs(t,e)));return{arrayValue:{values:n}}}class xr extends Cr{constructor(t,e){super(),this.k=t,this.N=e}}function Mr(t){return Rs(t.integerValue||t.doubleValue)}function Vr(t){return qs(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class Fr{constructor(t,e){this.field=t,this.transform=e}}class Ur{constructor(t,e){this.version=t,this.transformResults=e}}class jr{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new jr}static exists(t){return new jr(void 0,t)}static updateTime(t){return new jr(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function Br(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class $r{}function Hr(t,e,n){t instanceof Xr?function(t,e,n){const i=t.value.clone(),s=Jr(t.fieldTransforms,e,n.transformResults);i.setAll(s),e.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(t,e,n):t instanceof Qr?function(t,e,n){if(!Br(t.precondition,e))return void e.convertToUnknownDocument(n.version);const i=Jr(t.fieldTransforms,e,n.transformResults),s=e.data;s.setAll(Wr(t)),s.setAll(i),e.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function qr(t,e,n){t instanceof Xr?function(t,e,n){if(!Br(t.precondition,e))return;const i=t.value.clone(),s=Yr(t.fieldTransforms,n,e);i.setAll(s),e.convertToFoundDocument(zr(e),i).setHasLocalMutations()}(t,e,n):t instanceof Qr?function(t,e,n){if(!Br(t.precondition,e))return;const i=Yr(t.fieldTransforms,n,e),s=e.data;s.setAll(Wr(t)),s.setAll(i),e.convertToFoundDocument(zr(e),s).setHasLocalMutations()}(t,e,n):function(t,e){Br(t.precondition,e)&&e.convertToNoDocument(vs.min())}(t,e)}function Gr(t,e){let n=null;for(const i of t.fieldTransforms){const t=e.data.field(i.field),s=Dr(i.transform,t||null);null!=s&&(null==n&&(n=zs.empty()),n.set(i.field,s))}return n||null}function Kr(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&ms(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof _r&&e instanceof _r||t instanceof Or&&e instanceof Or?ms(t.elements,e.elements,Vs):t instanceof xr&&e instanceof xr?Vs(t.N,e.N):t instanceof Rr&&e instanceof Rr}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function zr(t){return t.isFoundDocument()?t.version:vs.min()}class Xr extends $r{constructor(t,e,n,i=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=i,this.type=0}}class Qr extends $r{constructor(t,e,n,i,s=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=i,this.fieldTransforms=s,this.type=1}}function Wr(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const i=t.data.field(n);e.set(n,i)}})),e}function Jr(t,e,n){const i=new Map;ts(t.length===n.length);for(let s=0;s<n.length;s++){const r=t[s],o=r.transform,a=e.data.field(r.field);i.set(r.field,kr(o,a,n[s]))}return i}function Yr(t,e,n){const i=new Map;for(const s of t){const t=s.transform,r=n.data.field(s.field);i.set(s.field,Nr(t,r,e))}return i}class Zr extends $r{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class to extends $r{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}var eo,no;(no=eo||(eo={}))[no.OK=0]="OK",no[no.CANCELLED=1]="CANCELLED",no[no.UNKNOWN=2]="UNKNOWN",no[no.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",no[no.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",no[no.NOT_FOUND=5]="NOT_FOUND",no[no.ALREADY_EXISTS=6]="ALREADY_EXISTS",no[no.PERMISSION_DENIED=7]="PERMISSION_DENIED",no[no.UNAUTHENTICATED=16]="UNAUTHENTICATED",no[no.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",no[no.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",no[no.ABORTED=10]="ABORTED",no[no.OUT_OF_RANGE=11]="OUT_OF_RANGE",no[no.UNIMPLEMENTED=12]="UNIMPLEMENTED",no[no.INTERNAL=13]="INTERNAL",no[no.UNAVAILABLE=14]="UNAVAILABLE",no[no.DATA_LOSS=15]="DATA_LOSS";class io{constructor(t,e){this.comparator=t,this.root=e||ro.EMPTY}insert(t,e){return new io(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,ro.BLACK,null,null))}remove(t){return new io(this.comparator,this.root.remove(t,this.comparator).copy(null,null,ro.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const i=this.comparator(t,n.key);if(0===i)return e+n.left.size;i<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new so(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new so(this.root,t,this.comparator,!1)}getReverseIterator(){return new so(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new so(this.root,t,this.comparator,!0)}}class so{constructor(t,e,n,i){this.isReverse=i,this.nodeStack=[];let s=1;for(;!t.isEmpty();)if(s=e?n(t.key,e):1,i&&(s*=-1),s<0)t=this.isReverse?t.left:t.right;else{if(0===s){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class ro{constructor(t,e,n,i,s){this.key=t,this.value=e,this.color=null!=n?n:ro.RED,this.left=null!=i?i:ro.EMPTY,this.right=null!=s?s:ro.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,i,s){return new ro(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=i?i:this.left,null!=s?s:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let i=this;const s=n(t,i.key);return i=s<0?i.copy(null,null,null,i.left.insert(t,e,n),null):0===s?i.copy(null,e,null,null,null):i.copy(null,null,null,null,i.right.insert(t,e,n)),i.fixUp()}removeMin(){if(this.left.isEmpty())return ro.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,i=this;if(e(t,i.key)<0)i.left.isEmpty()||i.left.isRed()||i.left.left.isRed()||(i=i.moveRedLeft()),i=i.copy(null,null,null,i.left.remove(t,e),null);else{if(i.left.isRed()&&(i=i.rotateRight()),i.right.isEmpty()||i.right.isRed()||i.right.left.isRed()||(i=i.moveRedRight()),0===e(t,i.key)){if(i.right.isEmpty())return ro.EMPTY;n=i.right.min(),i=i.copy(n.key,n.value,null,null,i.right.removeMin())}i=i.copy(null,null,null,null,i.right.remove(t,e))}return i.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,ro.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,ro.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw Zi();if(this.right.isRed())throw Zi();const t=this.left.check();if(t!==this.right.check())throw Zi();return t+(this.isRed()?0:1)}}ro.EMPTY=null,ro.RED=!0,ro.BLACK=!1,ro.EMPTY=new class{constructor(){this.size=0}get key(){throw Zi()}get value(){throw Zi()}get color(){throw Zi()}get left(){throw Zi()}get right(){throw Zi()}copy(t,e,n,i,s){return this}insert(t,e,n){return new ro(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class oo{constructor(t){this.comparator=t,this.data=new io(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const i=n.getNext();if(this.comparator(i.key,t[1])>=0)return;e(i.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new ao(this.data.getIterator())}getIteratorFrom(t){return new ao(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof oo))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,i=n.getNext().key;if(0!==this.comparator(t,i))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new oo(this.comparator);return e.data=t,e}}class ao{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const ho=new io(xs.comparator);function co(){return ho}const lo=new io(xs.comparator);function uo(){return lo}const fo=new io(xs.comparator);const po=new oo(xs.comparator);function go(...t){let e=po;for(const n of t)e=e.add(n);return e}const mo=new oo(gs);class yo{constructor(t,e){this.databaseId=t,this.C=e}}function vo(t,e){return t.C?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function wo(t,e){return t.C?e.toBase64():e.toUint8Array()}function Eo(t,e){return vo(t,e.toTimestamp())}function bo(t){return ts(!!t),vs.fromTimestamp(function(t){const e=Ds(t);return new ys(e.seconds,e.nanos)}(t))}function To(t,e){return function(t){return new Is(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function Io(t,e){return To(t.databaseId,e.path)}function Ao(t){const e=function(t){const e=Is.fromString(t);return ts(function(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}(e)),e}(t);return 4===e.length?Is.emptyPath():function(t){return ts(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}(e)}function So(t,e,n){return{name:Io(t,e),fields:n.value.mapValue.fields}}function Co(t){let e=Ao(t.parent);const n=t.structuredQuery,i=n.from?n.from.length:0;let s=null;if(i>0){ts(1===i);const t=n.from[0];t.allDescendants?s=t.collectionId:e=e.child(t.collectionId)}let r=[];n.where&&(r=No(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new ur(Do(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,Os(e)?null:e}(n.limit));let h=null;n.startAt&&(h=ko(n.startAt));let c=null;return n.endAt&&(c=ko(n.endAt)),function(t,e,n,i,s,r,o,a){return new gr(t,e,n,i,s,r,o,a)}(e,s,o,r,a,"F",h,c)}function No(t){return t?void 0!==t.unaryFilter?[_o(t)]:void 0!==t.fieldFilter?[Ro(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>No(t))).reduce(((t,e)=>t.concat(e))):Zi():[]}function ko(t){const e=!!t.before,n=t.values||[];return new cr(n,e)}function Do(t){return Ss.fromServerFormat(t.fieldPath)}function Ro(t){return tr.create(Do(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return Zi()}}(t.fieldFilter.op),t.fieldFilter.value)}function _o(t){switch(t.unaryFilter.op){case"IS_NAN":const e=Do(t.unaryFilter.field);return tr.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=Do(t.unaryFilter.field);return tr.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const i=Do(t.unaryFilter.field);return tr.create(i,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const s=Do(t.unaryFilter.field);return tr.create(s,"!=",{nullValue:"NULL_VALUE"});default:return Zi()}}function Lo(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function Oo(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=xo(e)),e=Po(t.get(n),e);return xo(e)}function Po(t,e){let n=e;const i=t.length;for(let e=0;e<i;e++){const i=t.charAt(e);switch(i){case"\0":n+="";break;case"":n+="";break;default:n+=i}}return n}function xo(t){return t+""}class Mo{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}Mo.store="owner",Mo.key="owner";class Vo{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}Vo.store="mutationQueues",Vo.keyPath="userId";class Fo{constructor(t,e,n,i,s){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=i,this.mutations=s}}Fo.store="mutations",Fo.keyPath="batchId",Fo.userMutationsIndex="userMutationsIndex",Fo.userMutationsKeyPath=["userId","batchId"];class Uo{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,Oo(e)]}static key(t,e,n){return[t,Oo(e),n]}}Uo.store="documentMutations",Uo.PLACEHOLDER=new Uo;class jo{constructor(t,e,n,i,s,r){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=i,this.readTime=s,this.parentPath=r}}jo.store="remoteDocuments",jo.readTimeIndex="readTimeIndex",jo.readTimeIndexPath="readTime",jo.collectionReadTimeIndex="collectionReadTimeIndex",jo.collectionReadTimeIndexPath=["parentPath","readTime"];class Bo{constructor(t){this.byteSize=t}}Bo.store="remoteDocumentGlobal",Bo.key="remoteDocumentGlobalKey";class $o{constructor(t,e,n,i,s,r,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=i,this.lastListenSequenceNumber=s,this.lastLimboFreeSnapshotVersion=r,this.query=o}}$o.store="targets",$o.keyPath="targetId",$o.queryTargetsIndexName="queryTargetsIndex",$o.queryTargetsKeyPath=["canonicalId","targetId"];class Ho{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}Ho.store="targetDocuments",Ho.keyPath=["targetId","path"],Ho.documentTargetsIndex="documentTargetsIndex",Ho.documentTargetsKeyPath=["path","targetId"];class qo{constructor(t,e,n,i){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=i}}qo.key="targetGlobalKey",qo.store="targetGlobal";class Go{constructor(t,e){this.collectionId=t,this.parent=e}}Go.store="collectionParents",Go.keyPath=["collectionId","parent"];class Ko{constructor(t,e,n,i){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=i}}Ko.store="clientMetadata",Ko.keyPath="clientId";class zo{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}zo.store="bundles",zo.keyPath="bundleId";class Xo{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}Xo.store="namedQueries",Xo.keyPath="name",Vo.store,Fo.store,Uo.store,jo.store,$o.store,Mo.store,qo.store,Ho.store,Ko.store,Bo.store,Go.store,zo.store,Xo.store;class Qo{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&Zi(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new Qo(((n,i)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,i)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,i)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof Qo?e:Qo.resolve(e)}catch(t){return Qo.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):Qo.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):Qo.reject(e)}static resolve(t){return new Qo(((e,n)=>{e(t)}))}static reject(t){return new Qo(((e,n)=>{n(t)}))}static waitFor(t){return new Qo(((e,n)=>{let i=0,s=0,r=!1;t.forEach((t=>{++i,t.next((()=>{++s,r&&s===i&&e()}),(t=>n(t)))})),r=!0,s===i&&e()}))}static or(t){let e=Qo.resolve(!1);for(const n of t)e=e.next((t=>t?Qo.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,i)=>{n.push(e.call(this,t,i))})),this.waitFor(n)}}function Wo(t){return"IndexedDbTransactionError"===t.name}class Jo{constructor(t,e,n,i){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=i}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const i=this.mutations[e];i.key.isEqual(t.key)&&Hr(i,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&qr(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&qr(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),i=n;this.applyToLocalView(i),n.isValidDocument()||i.convertToNoDocument(vs.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),go())}isEqual(t){return this.batchId===t.batchId&&ms(this.mutations,t.mutations,((t,e)=>Kr(t,e)))&&ms(this.baseMutations,t.baseMutations,((t,e)=>Kr(t,e)))}}class Yo{constructor(t,e,n,i){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=i}static from(t,e,n){ts(t.mutations.length===n.length);let i=fo;const s=t.mutations;for(let t=0;t<s.length;t++)i=i.insert(s[t].key,n[t].version);return new Yo(t,e,n,i)}}class Zo{constructor(t){this.Gt=t}}function ta(t){const e=Co({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?function(t,e,n){return new gr(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}(e,e.limit,"L"):e}class ea{constructor(){this.zt=new na}addToCollectionParentIndex(t,e){return this.zt.add(e),Qo.resolve()}getCollectionParents(t,e){return Qo.resolve(this.zt.getEntries(e))}}class na{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),i=this.index[e]||new oo(Is.comparator),s=!i.has(n);return this.index[e]=i.add(n),s}has(t){const e=t.lastSegment(),n=t.popLast(),i=this.index[e];return i&&i.has(n)}getEntries(t){return(this.index[t]||new oo(Is.comparator)).toArray()}}class ia{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new ia(t,ia.DEFAULT_COLLECTION_PERCENTILE,ia.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}ia.DEFAULT_COLLECTION_PERCENTILE=10,ia.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,ia.DEFAULT=new ia(41943040,ia.DEFAULT_COLLECTION_PERCENTILE,ia.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),ia.DISABLED=new ia(-1,0,0);class sa{constructor(t){this.se=t}next(){return this.se+=2,this.se}static ie(){return new sa(0)}static re(){return new sa(-1)}}async function ra(t){if(t.code!==ns.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==t.message)throw t;Qi("LocalStore","Unexpectedly lost primary lease")}class oa{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,i]of n)if(this.equalsFn(e,t))return i}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),i=this.inner[n];if(void 0!==i){for(let n=0;n<i.length;n++)if(this.equalsFn(i[n][0],t))return void(i[n]=[t,e]);i.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let i=0;i<n.length;i++)if(this.equalsFn(n[i][0],t))return 1===n.length?delete this.inner[e]:n.splice(i,1),!0;return!1}forEach(t){Es(this.inner,((e,n)=>{for(const[e,i]of n)t(e,i)}))}isEmpty(){return bs(this.inner)}}class aa{constructor(t,e,n){this.Je=t,this.An=e,this.Jt=n}Rn(t,e){return this.An.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Pn(t,e,n)))}Pn(t,e,n){return this.Je.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}bn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}vn(t,e){return this.Je.getEntries(t,e).next((e=>this.Vn(t,e).next((()=>e))))}Vn(t,e){return this.An.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.bn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return xs.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Sn(t,e.path):function(t){return null!==t.collectionGroup}(e)?this.Dn(t,e,n):this.Cn(t,e,n)}Sn(t,e){return this.Rn(t,new xs(e)).next((t=>{let e=uo();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Dn(t,e,n){const i=e.collectionGroup;let s=uo();return this.Jt.getCollectionParents(t,i).next((r=>Qo.forEach(r,(r=>{const o=function(t,e){return new gr(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,r.child(i));return this.Cn(t,o,n).next((t=>{t.forEach(((t,e)=>{s=s.insert(t,e)}))}))})).next((()=>s))))}Cn(t,e,n){let i,s;return this.Je.getDocumentsMatchingQuery(t,e,n).next((n=>(i=n,this.An.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(s=e,this.Nn(t,s,i).next((t=>{i=t;for(const t of s)for(const e of t.mutations){const n=e.key;let s=i.get(n);null==s&&(s=Qs.newInvalidDocument(n),i=i.insert(n,s)),qr(e,s,t.localWriteTime),s.isFoundDocument()||(i=i.remove(n))}}))))).next((()=>(i.forEach(((t,n)=>{br(e,n)||(i=i.remove(t))})),i)))}Nn(t,e,n){let i=go();for(const t of e)for(const e of t.mutations)e instanceof Qr&&null===n.get(e.key)&&(i=i.add(e.key));let s=n;return this.Je.getEntries(t,i).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(s=s.insert(t,e))})),s)))}}class ha{constructor(t,e,n,i){this.targetId=t,this.fromCache=e,this.kn=n,this.xn=i}static $n(t,e){let n=go(),i=go();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:i=i.add(t.doc.key)}return new ha(t,e.fromCache,n,i)}}class ca{Fn(t){this.On=t}getDocumentsMatchingQuery(t,e,n,i){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(vs.min())?this.Mn(t,e):this.On.vn(t,i).next((s=>{const r=this.Ln(e,s);return(function(t){return!Os(t.limit)&&"F"===t.limitType}(e)||function(t){return!Os(t.limit)&&"L"===t.limitType}(e))&&this.Bn(e.limitType,r,i,n)?this.Mn(t,e):(Xi()<=p.DEBUG&&Qi("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),Er(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(r.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Ln(t,e){let n=new oo(function(t){return(e,n)=>{let i=!1;for(const s of mr(t)){const t=Tr(s,e,n);if(0!==t)return t;i=i||s.field.isKeyField()}return 0}}(t));return e.forEach(((e,i)=>{br(t,i)&&(n=n.add(i))})),n}Bn(t,e,n,i){if(n.size!==e.size)return!0;const s="F"===t?e.last():e.first();return!!s&&(s.hasPendingWrites||s.version.compareTo(i)>0)}Mn(t,e){return Xi()<=p.DEBUG&&Qi("QueryEngine","Using full collection scan to execute query:",Er(e)),this.On.getDocumentsMatchingQuery(t,e,vs.min())}}class la{constructor(t,e,n,i){this.persistence=t,this.Un=e,this.k=i,this.qn=new io(gs),this.Kn=new oa((t=>Ys(t)),Zs),this.jn=vs.min(),this.An=t.getMutationQueue(n),this.Qn=t.getRemoteDocumentCache(),this.He=t.getTargetCache(),this.Wn=new aa(this.Qn,this.An,this.persistence.getIndexManager()),this.Ye=t.getBundleCache(),this.Un.Fn(this.Wn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.qn)))}}async function ua(t,e){const n=es(t);let i=n.An,s=n.Wn;const r=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let r;return n.An.getAllMutationBatches(t).next((o=>(r=o,i=n.persistence.getMutationQueue(e),s=new aa(n.Qn,i,n.persistence.getIndexManager()),i.getAllMutationBatches(t)))).next((e=>{const n=[],i=[];let o=go();for(const t of r){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){i.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return s.vn(t,o).next((t=>({Gn:t,removedBatchIds:n,addedBatchIds:i})))}))}));return n.An=i,n.Wn=s,n.Un.Fn(n.Wn),r}function fa(t,e){const n=es(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.An.getNextMutationBatchAfterBatchId(t,e))))}class da{constructor(t){this.k=t,this.Xn=new Map,this.Zn=new Map}getBundleMetadata(t,e){return Qo.resolve(this.Xn.get(e))}saveBundleMetadata(t,e){var n;return this.Xn.set(e.id,{id:(n=e).id,version:n.version,createTime:bo(n.createTime)}),Qo.resolve()}getNamedQuery(t,e){return Qo.resolve(this.Zn.get(e))}saveNamedQuery(t,e){return this.Zn.set(e.name,function(t){return{name:t.name,query:ta(t.bundledQuery),readTime:bo(t.readTime)}}(e)),Qo.resolve()}}class pa{constructor(){this.ts=new oo(ga.es),this.ns=new oo(ga.ss)}isEmpty(){return this.ts.isEmpty()}addReference(t,e){const n=new ga(t,e);this.ts=this.ts.add(n),this.ns=this.ns.add(n)}rs(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.os(new ga(t,e))}cs(t,e){t.forEach((t=>this.removeReference(t,e)))}us(t){const e=new xs(new Is([])),n=new ga(e,t),i=new ga(e,t+1),s=[];return this.ns.forEachInRange([n,i],(t=>{this.os(t),s.push(t.key)})),s}hs(){this.ts.forEach((t=>this.os(t)))}os(t){this.ts=this.ts.delete(t),this.ns=this.ns.delete(t)}ls(t){const e=new xs(new Is([])),n=new ga(e,t),i=new ga(e,t+1);let s=go();return this.ns.forEachInRange([n,i],(t=>{s=s.add(t.key)})),s}containsKey(t){const e=new ga(t,0),n=this.ts.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class ga{constructor(t,e){this.key=t,this.fs=e}static es(t,e){return xs.comparator(t.key,e.key)||gs(t.fs,e.fs)}static ss(t,e){return gs(t.fs,e.fs)||xs.comparator(t.key,e.key)}}class ma{constructor(t,e){this.Jt=t,this.referenceDelegate=e,this.An=[],this.ds=1,this.ws=new oo(ga.es)}checkEmpty(t){return Qo.resolve(0===this.An.length)}addMutationBatch(t,e,n,i){const s=this.ds;this.ds++,this.An.length>0&&this.An[this.An.length-1];const r=new Jo(s,e,n,i);this.An.push(r);for(const e of i)this.ws=this.ws.add(new ga(e.key,s)),this.Jt.addToCollectionParentIndex(t,e.key.path.popLast());return Qo.resolve(r)}lookupMutationBatch(t,e){return Qo.resolve(this._s(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,i=this.gs(n),s=i<0?0:i;return Qo.resolve(this.An.length>s?this.An[s]:null)}getHighestUnacknowledgedBatchId(){return Qo.resolve(0===this.An.length?-1:this.ds-1)}getAllMutationBatches(t){return Qo.resolve(this.An.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new ga(e,0),i=new ga(e,Number.POSITIVE_INFINITY),s=[];return this.ws.forEachInRange([n,i],(t=>{const e=this._s(t.fs);s.push(e)})),Qo.resolve(s)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new oo(gs);return e.forEach((t=>{const e=new ga(t,0),i=new ga(t,Number.POSITIVE_INFINITY);this.ws.forEachInRange([e,i],(t=>{n=n.add(t.fs)}))})),Qo.resolve(this.ys(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,i=n.length+1;let s=n;xs.isDocumentKey(s)||(s=s.child(""));const r=new ga(new xs(s),0);let o=new oo(gs);return this.ws.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===i&&(o=o.add(t.fs)),!0)}),r),Qo.resolve(this.ys(o))}ys(t){const e=[];return t.forEach((t=>{const n=this._s(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){ts(0===this.ps(e.batchId,"removed")),this.An.shift();let n=this.ws;return Qo.forEach(e.mutations,(i=>{const s=new ga(i.key,e.batchId);return n=n.delete(s),this.referenceDelegate.markPotentiallyOrphaned(t,i.key)})).next((()=>{this.ws=n}))}ee(t){}containsKey(t,e){const n=new ga(e,0),i=this.ws.firstAfterOrEqual(n);return Qo.resolve(e.isEqual(i&&i.key))}performConsistencyCheck(t){return this.An.length,Qo.resolve()}ps(t,e){return this.gs(t)}gs(t){return 0===this.An.length?0:t-this.An[0].batchId}_s(t){const e=this.gs(t);return e<0||e>=this.An.length?null:this.An[e]}}class ya{constructor(t,e){this.Jt=t,this.Ts=e,this.docs=new io(xs.comparator),this.size=0}addEntry(t,e,n){const i=e.key,s=this.docs.get(i),r=s?s.size:0,o=this.Ts(e);return this.docs=this.docs.insert(i,{document:e.clone(),size:o,readTime:n}),this.size+=o-r,this.Jt.addToCollectionParentIndex(t,i.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return Qo.resolve(n?n.document.clone():Qs.newInvalidDocument(e))}getEntries(t,e){let n=co();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():Qs.newInvalidDocument(t))})),Qo.resolve(n)}getDocumentsMatchingQuery(t,e,n){let i=co();const s=new xs(e.path.child("")),r=this.docs.getIteratorFrom(s);for(;r.hasNext();){const{key:t,value:{document:s,readTime:o}}=r.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||br(e,s)&&(i=i.insert(s.key,s.clone()))}return Qo.resolve(i)}Es(t,e){return Qo.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new va(this)}getSize(t){return Qo.resolve(this.size)}}class va extends class{constructor(){this.changes=new oa((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:vs.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:Qs.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?Qo.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}{constructor(t){super(),this.De=t}applyChanges(t){const e=[];return this.changes.forEach(((n,i)=>{i.document.isValidDocument()?e.push(this.De.addEntry(t,i.document,this.getReadTime(n))):this.De.removeEntry(n)})),Qo.waitFor(e)}getFromCache(t,e){return this.De.getEntry(t,e)}getAllFromCache(t,e){return this.De.getEntries(t,e)}}class wa{constructor(t){this.persistence=t,this.Is=new oa((t=>Ys(t)),Zs),this.lastRemoteSnapshotVersion=vs.min(),this.highestTargetId=0,this.As=0,this.Rs=new pa,this.targetCount=0,this.Ps=sa.ie()}forEachTarget(t,e){return this.Is.forEach(((t,n)=>e(n))),Qo.resolve()}getLastRemoteSnapshotVersion(t){return Qo.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return Qo.resolve(this.As)}allocateTargetId(t){return this.highestTargetId=this.Ps.next(),Qo.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.As&&(this.As=e),Qo.resolve()}ce(t){this.Is.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Ps=new sa(e),this.highestTargetId=e),t.sequenceNumber>this.As&&(this.As=t.sequenceNumber)}addTargetData(t,e){return this.ce(e),this.targetCount+=1,Qo.resolve()}updateTargetData(t,e){return this.ce(e),Qo.resolve()}removeTargetData(t,e){return this.Is.delete(e.target),this.Rs.us(e.targetId),this.targetCount-=1,Qo.resolve()}removeTargets(t,e,n){let i=0;const s=[];return this.Is.forEach(((r,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Is.delete(r),s.push(this.removeMatchingKeysForTargetId(t,o.targetId)),i++)})),Qo.waitFor(s).next((()=>i))}getTargetCount(t){return Qo.resolve(this.targetCount)}getTargetData(t,e){const n=this.Is.get(e)||null;return Qo.resolve(n)}addMatchingKeys(t,e,n){return this.Rs.rs(e,n),Qo.resolve()}removeMatchingKeys(t,e,n){this.Rs.cs(e,n);const i=this.persistence.referenceDelegate,s=[];return i&&e.forEach((e=>{s.push(i.markPotentiallyOrphaned(t,e))})),Qo.waitFor(s)}removeMatchingKeysForTargetId(t,e){return this.Rs.us(e),Qo.resolve()}getMatchingKeysForTargetId(t,e){const n=this.Rs.ls(e);return Qo.resolve(n)}containsKey(t,e){return Qo.resolve(this.Rs.containsKey(e))}}class Ea{constructor(t,e){this.bs={},this.Be=new fs(0),this.Ue=!1,this.Ue=!0,this.referenceDelegate=t(this),this.He=new wa(this),this.Jt=new ea,this.Je=function(t,e){return new ya(t,e)}(this.Jt,(t=>this.referenceDelegate.vs(t))),this.k=new Zo(e),this.Ye=new da(this.k)}start(){return Promise.resolve()}shutdown(){return this.Ue=!1,Promise.resolve()}get started(){return this.Ue}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Jt}getMutationQueue(t){let e=this.bs[t.toKey()];return e||(e=new ma(this.Jt,this.referenceDelegate),this.bs[t.toKey()]=e),e}getTargetCache(){return this.He}getRemoteDocumentCache(){return this.Je}getBundleCache(){return this.Ye}runTransaction(t,e,n){Qi("MemoryPersistence","Starting transaction:",t);const i=new ba(this.Be.next());return this.referenceDelegate.Vs(),n(i).next((t=>this.referenceDelegate.Ss(i).next((()=>t)))).toPromise().then((t=>(i.raiseOnCommittedEvent(),t)))}Ds(t,e){return Qo.or(Object.values(this.bs).map((n=>()=>n.containsKey(t,e))))}}class ba extends class{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}{constructor(t){super(),this.currentSequenceNumber=t}}class Ta{constructor(t){this.persistence=t,this.Cs=new pa,this.Ns=null}static ks(t){return new Ta(t)}get xs(){if(this.Ns)return this.Ns;throw Zi()}addReference(t,e,n){return this.Cs.addReference(n,e),this.xs.delete(n.toString()),Qo.resolve()}removeReference(t,e,n){return this.Cs.removeReference(n,e),this.xs.add(n.toString()),Qo.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),Qo.resolve()}removeTarget(t,e){this.Cs.us(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}Vs(){this.Ns=new Set}Ss(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return Qo.forEach(this.xs,(n=>{const i=xs.fromPath(n);return this.$s(t,i).next((t=>{t||e.removeEntry(i)}))})).next((()=>(this.Ns=null,e.apply(t))))}updateLimboDocument(t,e){return this.$s(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}vs(t){return 0}$s(t,e){return Qo.or([()=>Qo.resolve(this.Cs.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ds(t,e)])}}class Ia{constructor(){this.activeTargetIds=mo}Ms(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ls(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class Aa{constructor(){this.pi=new Ia,this.Ti={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.pi.Ms(t),this.Ti[t]||"not-current"}updateQueryState(t,e,n){this.Ti[t]=e}removeLocalQueryTarget(t){this.pi.Ls(t)}isLocalQueryTarget(t){return this.pi.activeTargetIds.has(t)}clearQueryState(t){delete this.Ti[t]}getAllActiveQueryTargets(){return this.pi.activeTargetIds}isActiveQueryTarget(t){return this.pi.activeTargetIds.has(t)}start(){return this.pi=new Ia,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class Sa{Ei(t){}shutdown(){}}class Ca{constructor(){this.Ii=()=>this.Ai(),this.Ri=()=>this.Pi(),this.bi=[],this.vi()}Ei(t){this.bi.push(t)}shutdown(){window.removeEventListener("online",this.Ii),window.removeEventListener("offline",this.Ri)}vi(){window.addEventListener("online",this.Ii),window.addEventListener("offline",this.Ri)}Ai(){Qi("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.bi)t(0)}Pi(){Qi("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.bi)t(1)}static bt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Na={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class ka{constructor(t){this.Vi=t.Vi,this.Si=t.Si}Di(t){this.Ci=t}Ni(t){this.ki=t}onMessage(t){this.xi=t}close(){this.Si()}send(t){this.Vi(t)}$i(){this.Ci()}Fi(t){this.ki(t)}Oi(t){this.xi(t)}}class Da extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Mi=e+"://"+t.host,this.Li="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Bi(t,e,n,i,s){const r=this.Ui(t,e);Qi("RestConnection","Sending: ",r,n);const o={};return this.qi(o,i,s),this.Ki(t,r,o,n).then((t=>(Qi("RestConnection","Received: ",t),t)),(e=>{throw Ji("RestConnection",`${t} failed with error: `,e,"url: ",r,"request:",n),e}))}ji(t,e,n,i,s){return this.Bi(t,e,n,i,s)}qi(t,e,n){t["X-Goog-Api-Client"]="gl-js/ fire/"+Ki,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e&&e.headers.forEach(((e,n)=>t[n]=e)),n&&n.headers.forEach(((e,n)=>t[n]=e))}Ui(t,e){const n=Na[t];return`${this.Mi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}Ki(t,e,n,i){return new Promise(((s,r)=>{const o=new Hi;o.listenOnce(Fi.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case Vi.NO_ERROR:const e=o.getResponseJson();Qi("Connection","XHR received:",JSON.stringify(e)),s(e);break;case Vi.TIMEOUT:Qi("Connection",'RPC "'+t+'" timed out'),r(new is(ns.DEADLINE_EXCEEDED,"Request time out"));break;case Vi.HTTP_ERROR:const n=o.getStatus();if(Qi("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(ns).indexOf(e)>=0?e:ns.UNKNOWN}(t.status);r(new is(e,t.message))}else r(new is(ns.UNKNOWN,"Server responded with status "+o.getStatus()))}else r(new is(ns.UNAVAILABLE,"Connection failed."));break;default:Zi()}}finally{Qi("Connection",'RPC "'+t+'" completed.')}}));const a=JSON.stringify(i);o.send(e,"POST",a,n,15)}))}Qi(t,e,i){const s=[this.Mi,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=xi(),o=Mi(),a={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(a.xmlHttpFactory=new Bi({})),this.qi(a.initMessageHeaders,e,i),"undefined"!=typeof window&&(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(n())||"object"==typeof navigator&&"ReactNative"===navigator.product||n().indexOf("Electron/")>=0||function(){const t=n();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}()||n().indexOf("MSAppHost/")>=0||function(){const t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}()||(a.httpHeadersOverwriteParam="$httpHeaders");const h=s.join("");Qi("Connection","Creating WebChannel: "+h,a);const c=r.createWebChannel(h,a);let l=!1,u=!1;const f=new ka({Vi:t=>{u?Qi("Connection","Not sending because WebChannel is closed:",t):(l||(Qi("Connection","Opening WebChannel transport."),c.open(),l=!0),Qi("Connection","WebChannel sending:",t),c.send(t))},Si:()=>c.close()}),d=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return d(c,$i.EventType.OPEN,(()=>{u||Qi("Connection","WebChannel transport opened.")})),d(c,$i.EventType.CLOSE,(()=>{u||(u=!0,Qi("Connection","WebChannel transport closed"),f.Fi())})),d(c,$i.EventType.ERROR,(t=>{u||(u=!0,Ji("Connection","WebChannel transport errored:",t),f.Fi(new is(ns.UNAVAILABLE,"The operation could not be completed")))})),d(c,$i.EventType.MESSAGE,(t=>{var e;if(!u){const n=t.data[0];ts(!!n);const i=n,s=i.error||(null===(e=i[0])||void 0===e?void 0:e.error);if(s){Qi("Connection","WebChannel received error:",s);const t=s.status;let e=function(t){const e=eo[t];if(void 0!==e)return function(t){if(void 0===t)return Wi("GRPC error has no .code"),ns.UNKNOWN;switch(t){case eo.OK:return ns.OK;case eo.CANCELLED:return ns.CANCELLED;case eo.UNKNOWN:return ns.UNKNOWN;case eo.DEADLINE_EXCEEDED:return ns.DEADLINE_EXCEEDED;case eo.RESOURCE_EXHAUSTED:return ns.RESOURCE_EXHAUSTED;case eo.INTERNAL:return ns.INTERNAL;case eo.UNAVAILABLE:return ns.UNAVAILABLE;case eo.UNAUTHENTICATED:return ns.UNAUTHENTICATED;case eo.INVALID_ARGUMENT:return ns.INVALID_ARGUMENT;case eo.NOT_FOUND:return ns.NOT_FOUND;case eo.ALREADY_EXISTS:return ns.ALREADY_EXISTS;case eo.PERMISSION_DENIED:return ns.PERMISSION_DENIED;case eo.FAILED_PRECONDITION:return ns.FAILED_PRECONDITION;case eo.ABORTED:return ns.ABORTED;case eo.OUT_OF_RANGE:return ns.OUT_OF_RANGE;case eo.UNIMPLEMENTED:return ns.UNIMPLEMENTED;case eo.DATA_LOSS:return ns.DATA_LOSS;default:return Zi()}}(e)}(t),n=s.message;void 0===e&&(e=ns.INTERNAL,n="Unknown error status: "+t+" with message "+s.message),u=!0,f.Fi(new is(e,n)),c.close()}else Qi("Connection","WebChannel received:",n),f.Oi(n)}})),d(o,Ui.STAT_EVENT,(t=>{t.stat===ji.PROXY?Qi("Connection","Detected buffering proxy"):t.stat===ji.NOPROXY&&Qi("Connection","Detected no buffering proxy")})),setTimeout((()=>{f.$i()}),0),f}}function Ra(){return"undefined"!=typeof document?document:null}function _a(t){return new yo(t,!0)}class La{constructor(t,e,n=1e3,i=1.5,s=6e4){this.Oe=t,this.timerId=e,this.Wi=n,this.Gi=i,this.zi=s,this.Hi=0,this.Ji=null,this.Yi=Date.now(),this.reset()}reset(){this.Hi=0}Xi(){this.Hi=this.zi}Zi(t){this.cancel();const e=Math.floor(this.Hi+this.tr()),n=Math.max(0,Date.now()-this.Yi),i=Math.max(0,e-n);i>0&&Qi("ExponentialBackoff",`Backing off for ${i} ms (base delay: ${this.Hi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Ji=this.Oe.enqueueAfterDelay(this.timerId,i,(()=>(this.Yi=Date.now(),t()))),this.Hi*=this.Gi,this.Hi<this.Wi&&(this.Hi=this.Wi),this.Hi>this.zi&&(this.Hi=this.zi)}er(){null!==this.Ji&&(this.Ji.skipDelay(),this.Ji=null)}cancel(){null!==this.Ji&&(this.Ji.cancel(),this.Ji=null)}tr(){return(Math.random()-.5)*this.Hi}}class Oa extends class{constructor(t,e,n,i,s,r,o,a){this.Oe=t,this.nr=n,this.sr=i,this.ir=s,this.authCredentialsProvider=r,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.rr=0,this.ar=null,this.cr=null,this.stream=null,this.ur=new La(t,e)}hr(){return 1===this.state||5===this.state||this.lr()}lr(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.dr()}async stop(){this.hr()&&await this.close(0)}wr(){this.state=0,this.ur.reset()}_r(){this.lr()&&null===this.ar&&(this.ar=this.Oe.enqueueAfterDelay(this.nr,6e4,(()=>this.mr())))}gr(t){this.yr(),this.stream.send(t)}async mr(){if(this.lr())return this.close(0)}yr(){this.ar&&(this.ar.cancel(),this.ar=null)}pr(){this.cr&&(this.cr.cancel(),this.cr=null)}async close(t,e){this.yr(),this.pr(),this.ur.cancel(),this.rr++,4!==t?this.ur.reset():e&&e.code===ns.RESOURCE_EXHAUSTED?(Wi(e.toString()),Wi("Using maximum backoff delay to prevent overloading the backend."),this.ur.Xi()):e&&e.code===ns.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Tr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ni(e)}Tr(){}auth(){this.state=1;const t=this.Er(this.rr),e=this.rr;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([t,n])=>{this.rr===e&&this.Ir(t,n)}),(e=>{t((()=>{const t=new is(ns.UNKNOWN,"Fetching auth token failed: "+e.message);return this.Ar(t)}))}))}Ir(t,e){const n=this.Er(this.rr);this.stream=this.Rr(t,e),this.stream.Di((()=>{n((()=>(this.state=2,this.cr=this.Oe.enqueueAfterDelay(this.sr,1e4,(()=>(this.lr()&&(this.state=3),Promise.resolve()))),this.listener.Di())))})),this.stream.Ni((t=>{n((()=>this.Ar(t)))})),this.stream.onMessage((t=>{n((()=>this.onMessage(t)))}))}dr(){this.state=5,this.ur.Zi((async()=>{this.state=0,this.start()}))}Ar(t){return Qi("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(4,t)}Er(t){return e=>{this.Oe.enqueueAndForget((()=>this.rr===t?e():(Qi("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}{constructor(t,e,n,i,s,r){super(t,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",e,n,i,r),this.k=s,this.Vr=!1}get Sr(){return this.Vr}start(){this.Vr=!1,this.lastStreamToken=void 0,super.start()}Tr(){this.Vr&&this.Dr([])}Rr(t,e){return this.ir.Qi("Write",t,e)}onMessage(t){if(ts(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Vr){this.ur.reset();const e=function(t,e){return t&&t.length>0?(ts(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?bo(t.updateTime):bo(e);return n.isEqual(vs.min())&&(n=bo(e)),new Ur(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=bo(t.commitTime);return this.listener.Cr(n,e)}return ts(!t.writeResults||0===t.writeResults.length),this.Vr=!0,this.listener.Nr()}kr(){const t={};t.database=function(t){return new Is(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}(this.k),this.gr(t)}Dr(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>function(t,e){let n;if(e instanceof Xr)n={update:So(t,e.key,e.value)};else if(e instanceof Zr)n={delete:Io(t,e.key)};else if(e instanceof Qr)n={update:So(t,e.key,e.data),updateMask:Lo(e.fieldMask)};else{if(!(e instanceof to))return Zi();n={verify:Io(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof Rr)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof _r)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof Or)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof xr)return{fieldPath:e.field.canonicalString(),increment:n.N};throw Zi()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:Eo(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:Zi()}(t,e.precondition)),n}(this.k,t)))};this.gr(e)}}class Pa extends class{}{constructor(t,e,n,i){super(),this.authCredentials=t,this.appCheckCredentials=e,this.ir=n,this.k=i,this.$r=!1}Fr(){if(this.$r)throw new is(ns.FAILED_PRECONDITION,"The client has already been terminated.")}Bi(t,e,n){return this.Fr(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([i,s])=>this.ir.Bi(t,e,n,i,s))).catch((t=>{throw"FirebaseError"===t.name?(t.code===ns.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new is(ns.UNKNOWN,t.toString())}))}ji(t,e,n){return this.Fr(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([i,s])=>this.ir.ji(t,e,n,i,s))).catch((t=>{throw"FirebaseError"===t.name?(t.code===ns.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),t):new is(ns.UNKNOWN,t.toString())}))}terminate(){this.$r=!0}}class xa{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Or=0,this.Mr=null,this.Lr=!0}Br(){0===this.Or&&(this.Ur("Unknown"),this.Mr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.Mr=null,this.qr("Backend didn't respond within 10 seconds."),this.Ur("Offline"),Promise.resolve()))))}Kr(t){"Online"===this.state?this.Ur("Unknown"):(this.Or++,this.Or>=1&&(this.jr(),this.qr(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Ur("Offline")))}set(t){this.jr(),this.Or=0,"Online"===t&&(this.Lr=!1),this.Ur(t)}Ur(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}qr(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.Lr?(Wi(e),this.Lr=!1):Qi("OnlineStateTracker",e)}jr(){null!==this.Mr&&(this.Mr.cancel(),this.Mr=null)}}class Ma{constructor(t,e,n,i,s){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Qr=[],this.Wr=new Map,this.Gr=new Set,this.zr=[],this.Hr=s,this.Hr.Ei((t=>{n.enqueueAndForget((async()=>{Ua(this)&&(Qi("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=es(t);e.Gr.add(4),await Fa(e),e.Jr.set("Unknown"),e.Gr.delete(4),await Va(e)}(this))}))})),this.Jr=new xa(n,i)}}async function Va(t){if(Ua(t))for(const e of t.zr)await e(!0)}async function Fa(t){for(const e of t.zr)await e(!1)}function Ua(t){return 0===es(t).Gr.size}async function ja(t,e,n){if(!Wo(e))throw e;t.Gr.add(1),await Fa(t),t.Jr.set("Offline"),n||(n=()=>function(t){const e=es(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.He.getLastRemoteSnapshotVersion(t)))}(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{Qi("RemoteStore","Retrying IndexedDB access"),await n(),t.Gr.delete(1),await Va(t)}))}function Ba(t,e){return e().catch((n=>ja(t,n,e)))}async function $a(t){const e=es(t),n=Ja(e);let i=e.Qr.length>0?e.Qr[e.Qr.length-1].batchId:-1;for(;Ha(e);)try{const t=await fa(e.localStore,i);if(null===t){0===e.Qr.length&&n._r();break}i=t.batchId,qa(e,t)}catch(t){await ja(e,t)}Ga(e)&&Ka(e)}function Ha(t){return Ua(t)&&t.Qr.length<10}function qa(t,e){t.Qr.push(e);const n=Ja(t);n.lr()&&n.Sr&&n.Dr(e.mutations)}function Ga(t){return Ua(t)&&!Ja(t).hr()&&t.Qr.length>0}function Ka(t){Ja(t).start()}async function za(t){Ja(t).kr()}async function Xa(t){const e=Ja(t);for(const n of t.Qr)e.Dr(n.mutations)}async function Qa(t,e,n){const i=t.Qr.shift(),s=Yo.from(i,e,n);await Ba(t,(()=>t.remoteSyncer.applySuccessfulWrite(s))),await $a(t)}async function Wa(t,e){e&&Ja(t).Sr&&await async function(t,e){if(function(t){switch(t){default:return Zi();case ns.CANCELLED:case ns.UNKNOWN:case ns.DEADLINE_EXCEEDED:case ns.RESOURCE_EXHAUSTED:case ns.INTERNAL:case ns.UNAVAILABLE:case ns.UNAUTHENTICATED:return!1;case ns.INVALID_ARGUMENT:case ns.NOT_FOUND:case ns.ALREADY_EXISTS:case ns.PERMISSION_DENIED:case ns.FAILED_PRECONDITION:case ns.ABORTED:case ns.OUT_OF_RANGE:case ns.UNIMPLEMENTED:case ns.DATA_LOSS:return!0}}(n=e.code)&&n!==ns.ABORTED){const n=t.Qr.shift();Ja(t).wr(),await Ba(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await $a(t)}var n}(t,e),Ga(t)&&Ka(t)}function Ja(t){return t.Zr||(t.Zr=function(t,e,n){const i=es(t);return i.Fr(),new Oa(e,i.ir,i.authCredentials,i.appCheckCredentials,i.k,n)}(t.datastore,t.asyncQueue,{Di:za.bind(null,t),Ni:Wa.bind(null,t),Nr:Xa.bind(null,t),Cr:Qa.bind(null,t)}),t.zr.push((async e=>{e?(t.Zr.wr(),await $a(t)):(await t.Zr.stop(),t.Qr.length>0&&(Qi("RemoteStore",`Stopping write stream with ${t.Qr.length} pending writes`),t.Qr=[]))}))),t.Zr}class Ya{constructor(t,e,n,i,s){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=i,this.removalCallback=s,this.deferred=new ss,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,i,s){const r=Date.now()+n,o=new Ya(t,e,r,i,s);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new is(ns.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function Za(t,e){if(Wi("AsyncQueue",`${e}: ${t}`),Wo(t))return new is(ns.UNAVAILABLE,`${e}: ${t}`);throw t}class th{constructor(){this.queries=new oa((t=>wr(t)),vr),this.onlineState="Unknown",this.io=new Set}}class eh{constructor(t,e,n,i,s,r){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=i,this.currentUser=s,this.maxConcurrentLimboResolutions=r,this.Fo={},this.Oo=new oa((t=>wr(t)),vr),this.Mo=new Map,this.Lo=new Set,this.Bo=new io(xs.comparator),this.Uo=new Map,this.qo=new pa,this.Ko={},this.jo=new Map,this.Qo=sa.re(),this.onlineState="Unknown",this.Wo=void 0}get isPrimaryClient(){return!0===this.Wo}}function nh(t,e,n){const i=es(t);if(i.isPrimaryClient&&0===n||!i.isPrimaryClient&&1===n){const t=[];i.Oo.forEach(((n,i)=>{const s=i.view.ro(e);s.snapshot&&t.push(s.snapshot)})),function(t,e){const n=es(t);n.onlineState=e;let i=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.ro(e)&&(i=!0)})),i&&function(t){t.io.forEach((t=>{t.next()}))}(n)}(i.eventManager,e),t.length&&i.Fo.Pr(t),i.onlineState=e,i.isPrimaryClient&&i.sharedClientState.setOnlineState(e)}}async function ih(t,e){const n=es(t),i=e.batch.batchId;try{const t=await function(t,e){const n=es(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const i=e.batch.keys(),s=n.Qn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,i){const s=n.batch,r=s.keys();let o=Qo.resolve();return r.forEach((t=>{o=o.next((()=>i.getEntry(e,t))).next((e=>{const r=n.docVersions.get(t);ts(null!==r),e.version.compareTo(r)<0&&(s.applyToRemoteDocument(e,n),e.isValidDocument()&&i.addEntry(e,n.commitVersion))}))})),o.next((()=>t.An.removeMutationBatch(e,s)))}(n,t,e,s).next((()=>s.apply(t))).next((()=>n.An.performConsistencyCheck(t))).next((()=>n.Wn.vn(t,i)))}))}(n.localStore,e);oh(n,i,null),rh(n,i),n.sharedClientState.updateMutationState(i,"acknowledged"),await ah(n,t)}catch(t){await ra(t)}}async function sh(t,e,n){const i=es(t);try{const t=await function(t,e){const n=es(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let i;return n.An.lookupMutationBatch(t,e).next((e=>(ts(null!==e),i=e.keys(),n.An.removeMutationBatch(t,e)))).next((()=>n.An.performConsistencyCheck(t))).next((()=>n.Wn.vn(t,i)))}))}(i.localStore,e);oh(i,e,n),rh(i,e),i.sharedClientState.updateMutationState(e,"rejected",n),await ah(i,t)}catch(n){await ra(n)}}function rh(t,e){(t.jo.get(e)||[]).forEach((t=>{t.resolve()})),t.jo.delete(e)}function oh(t,e,n){const i=es(t);let s=i.Ko[i.currentUser.toKey()];if(s){const t=s.get(e);t&&(n?t.reject(n):t.resolve(),s=s.remove(e)),i.Ko[i.currentUser.toKey()]=s}}async function ah(t,e,n){const i=es(t),s=[],r=[],o=[];i.Oo.isEmpty()||(i.Oo.forEach(((t,a)=>{o.push(i.Go(a,e,n).then((t=>{if(t){i.isPrimaryClient&&i.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),s.push(t);const e=ha.$n(a.targetId,t);r.push(e)}})))})),await Promise.all(o),i.Fo.Pr(s),await async function(t,e){const n=es(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>Qo.forEach(e,(e=>Qo.forEach(e.kn,(i=>n.persistence.referenceDelegate.addReference(t,e.targetId,i))).next((()=>Qo.forEach(e.xn,(i=>n.persistence.referenceDelegate.removeReference(t,e.targetId,i)))))))))}catch(t){if(!Wo(t))throw t;Qi("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.qn.get(e),i=t.snapshotVersion,s=t.withLastLimboFreeSnapshotVersion(i);n.qn=n.qn.insert(e,s)}}}(i.localStore,r))}async function hh(t,e){const n=es(t);if(!n.currentUser.isEqual(e)){Qi("SyncEngine","User change. New user:",e.toKey());const t=await ua(n.localStore,e);n.currentUser=e,function(t,e){t.jo.forEach((t=>{t.forEach((t=>{t.reject(new is(ns.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.jo.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await ah(n,t.Gn)}}function ch(t){const e=es(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=ih.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=sh.bind(null,e),e}class lh{constructor(){this.synchronizeTabs=!1}async initialize(t){this.k=_a(t.databaseInfo.databaseId),this.sharedClientState=this.Jo(t),this.persistence=this.Yo(t),await this.persistence.start(),this.gcScheduler=this.Xo(t),this.localStore=this.Zo(t)}Xo(t){return null}Zo(t){return function(t,e,n,i){return new la(t,e,n,i)}(this.persistence,new ca,t.initialUser,this.k)}Yo(t){return new Ea(Ta.ks,this.k)}Jo(t){return new Aa}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class uh{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>nh(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=hh.bind(null,this.syncEngine),await async function(t,e){const n=es(t);e?(n.Gr.delete(2),await Va(n)):e||(n.Gr.add(2),await Fa(n),n.Jr.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new th}createDatastore(t){const e=_a(t.databaseInfo.databaseId),n=(i=t.databaseInfo,new Da(i));var i;return function(t,e,n,i){return new Pa(t,e,n,i)}(t.authCredentials,t.appCheckCredentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,i=t.asyncQueue,s=t=>nh(this.syncEngine,t,0),r=Ca.bt()?new Ca:new Sa,new Ma(e,n,i,s,r);var e,n,i,s,r}createSyncEngine(t,e){return function(t,e,n,i,s,r,o){const a=new eh(t,e,n,i,s,r);return o&&(a.Wo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=es(t);Qi("RemoteStore","RemoteStore shutting down."),e.Gr.add(5),await Fa(e),e.Hr.shutdown(),e.Jr.set("Unknown")}(this.remoteStore)}}class fh{constructor(t,e,n,i){this.authCredentials=t,this.appCheckCredentials=e,this.asyncQueue=n,this.databaseInfo=i,this.user=Gi.UNAUTHENTICATED,this.clientId=ps.A(),this.authCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async t=>{Qi("FirestoreClient","Received user=",t.uid),await this.authCredentialListener(t),this.user=t})),this.appCheckCredentials.start(n,(()=>Promise.resolve()))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.authCredentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new is(ns.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new ss;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),t.resolve()}catch(e){const n=Za(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function dh(t,e){t.asyncQueue.verifyOperationInProgress();const n=await async function(t){return t.offlineComponents||(Qi("FirestoreClient","Using default OfflineComponentProvider"),await async function(t,e){t.asyncQueue.verifyOperationInProgress(),Qi("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let i=n.initialUser;t.setCredentialChangeListener((async t=>{i.isEqual(t)||(await ua(e.localStore,t),i=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}(t,new lh)),t.offlineComponents}(t);Qi("FirestoreClient","Initializing OnlineComponentProvider");const i=await t.getConfiguration();await e.initialize(n,i),t.setCredentialChangeListener((t=>async function(t,e){const n=es(t);n.asyncQueue.verifyOperationInProgress(),Qi("RemoteStore","RemoteStore received new credentials");const i=Ua(n);n.Gr.add(3),await Fa(n),i&&n.Jr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Gr.delete(3),await Va(n)}(e.remoteStore,t))),t.onlineComponents=e}function ph(t){return async function(t){return t.onlineComponents||(Qi("FirestoreClient","Using default OnlineComponentProvider"),await dh(t,new uh)),t.onlineComponents}(t).then((t=>t.syncEngine))}class gh{constructor(t,e,n,i,s,r,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=i,this.ssl=s,this.forceLongPolling=r,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class mh{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof mh&&t.projectId===this.projectId&&t.database===this.database}}const yh=new Map;function vh(t,e,n){if(!n)throw new is(ns.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function wh(t){if(!xs.isDocumentKey(t))throw new is(ns.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function Eh(t){if(xs.isDocumentKey(t))throw new is(ns.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function bh(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){return t.constructor?t.constructor.name:null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":Zi()}class Th{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new is(ns.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new is(ns.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,function(t,e,n,i){if(!0===e&&!0===i)throw new is(ns.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,t.experimentalForceLongPolling,0,t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class Ih{constructor(t,e,n){this._authCredentials=e,this._appCheckCredentials=n,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new Th({}),this._settingsFrozen=!1,t instanceof mh?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new is(ns.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new mh(t.options.projectId)}(t))}get app(){if(!this._app)throw new is(ns.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new is(ns.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new Th(t),void 0!==t.credentials&&(this._authCredentials=function(t){if(!t)return new os;switch(t.type){case"gapi":const e=t.client;return ts(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new cs(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new is(ns.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=yh.get(t);e&&(Qi("ComponentProvider","Removing Datastore"),yh.delete(t),e.terminate())}(this),Promise.resolve()}}class Ah{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new Ch(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new Ah(this.firestore,t,this._key)}}class Sh{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new Sh(this.firestore,t,this._query)}}class Ch extends Sh{constructor(t,e,n){super(t,e,function(t){return new gr(t)}(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new Ah(this.firestore,null,new xs(t))}withConverter(t){return new Ch(this.firestore,t,this._path)}}class Nh{constructor(){this.ma=Promise.resolve(),this.ga=[],this.ya=!1,this.pa=[],this.Ta=null,this.Ea=!1,this.Ia=!1,this.Aa=[],this.ur=new La(this,"async_queue_retry"),this.Ra=()=>{const t=Ra();t&&Qi("AsyncQueue","Visibility state changed to "+t.visibilityState),this.ur.er()};const t=Ra();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Ra)}get isShuttingDown(){return this.ya}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Pa(),this.ba(t)}enterRestrictedMode(t){if(!this.ya){this.ya=!0,this.Ia=t||!1;const e=Ra();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Ra)}}enqueue(t){if(this.Pa(),this.ya)return new Promise((()=>{}));const e=new ss;return this.ba((()=>this.ya&&this.Ia?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.ga.push(t),this.va())))}async va(){if(0!==this.ga.length){try{await this.ga[0](),this.ga.shift(),this.ur.reset()}catch(t){if(!Wo(t))throw t;Qi("AsyncQueue","Operation failed with retryable error: "+t)}this.ga.length>0&&this.ur.Zi((()=>this.va()))}}ba(t){const e=this.ma.then((()=>(this.Ea=!0,t().catch((t=>{this.Ta=t,this.Ea=!1;const e=function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t);throw Wi("INTERNAL UNHANDLED ERROR: ",e),t})).then((t=>(this.Ea=!1,t))))));return this.ma=e,e}enqueueAfterDelay(t,e,n){this.Pa(),this.Aa.indexOf(t)>-1&&(e=0);const i=Ya.createAndSchedule(this,t,e,n,(t=>this.Va(t)));return this.pa.push(i),i}Pa(){this.Ta&&Zi()}verifyOperationInProgress(){}async Sa(){let t;do{t=this.ma,await t}while(t!==this.ma)}Da(t){for(const e of this.pa)if(e.timerId===t)return!0;return!1}Ca(t){return this.Sa().then((()=>{this.pa.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this.pa)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.Sa()}))}Na(t){this.Aa.push(t)}Va(t){const e=this.pa.indexOf(t);this.pa.splice(e,1)}}class kh extends Ih{constructor(t,e,n){super(t,e,n),this.type="firestore",this._queue=new Nh,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||Dh(this),this._firestoreClient.terminate()}}function Dh(t){var e;const n=t._freezeSettings(),i=function(t,e,n,i){return new gh(t,e,n,i.host,i.ssl,i.experimentalForceLongPolling,i.experimentalAutoDetectLongPolling,i.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new fh(t._authCredentials,t._appCheckCredentials,t._queue,i)}class Rh{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new is(ns.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new Ss(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}class _h{constructor(t){this._byteString=t}static fromBase64String(t){try{return new _h(Ns.fromBase64String(t))}catch(t){throw new is(ns.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new _h(Ns.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class Lh{constructor(t){this._methodName=t}}class Oh{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new is(ns.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new is(ns.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return gs(this._lat,t._lat)||gs(this._long,t._long)}}const Ph=/^__.*__$/;class xh{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new Qr(t,this.data,this.fieldMask,e,this.fieldTransforms):new Xr(t,this.data,e,this.fieldTransforms)}}function Mh(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw Zi()}}class Vh{constructor(t,e,n,i,s,r){this.settings=t,this.databaseId=e,this.k=n,this.ignoreUndefinedProperties=i,void 0===s&&this.ka(),this.fieldTransforms=s||[],this.fieldMask=r||[]}get path(){return this.settings.path}get xa(){return this.settings.xa}$a(t){return new Vh(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.k,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Fa(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),i=this.$a({path:n,Oa:!1});return i.Ma(t),i}La(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),i=this.$a({path:n,Oa:!1});return i.ka(),i}Ba(t){return this.$a({path:void 0,Oa:!0})}Ua(t){return Xh(t,this.settings.methodName,this.settings.qa||!1,this.path,this.settings.Ka)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}ka(){if(this.path)for(let t=0;t<this.path.length;t++)this.Ma(this.path.get(t))}Ma(t){if(0===t.length)throw this.Ua("Document fields must not be empty");if(Mh(this.xa)&&Ph.test(t))throw this.Ua('Document fields cannot begin and end with "__"')}}class Fh{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.k=n||_a(t)}ja(t,e,n,i=!1){return new Vh({xa:t,methodName:e,Ka:n,path:Ss.emptyPath(),Oa:!1,qa:i},this.databaseId,this.k,this.ignoreUndefinedProperties)}}function Uh(t){const e=t._freezeSettings(),n=_a(t._databaseId);return new Fh(t._databaseId,!!e.ignoreUndefinedProperties,n)}function jh(t,e,n,i,s,r={}){const o=t.ja(r.merge||r.mergeFields?2:0,e,n,s);Gh("Data must be an object, but it was:",o,i);const a=Hh(i,o);let h,c;if(r.merge)h=new Cs(o.fieldMask),c=o.fieldTransforms;else if(r.mergeFields){const t=[];for(const i of r.mergeFields){const s=Kh(e,i,n);if(!o.contains(s))throw new is(ns.INVALID_ARGUMENT,`Field '${s}' is specified in your field mask but missing from your input data.`);Qh(t,s)||t.push(s)}h=new Cs(t),c=o.fieldTransforms.filter((t=>h.covers(t.field)))}else h=null,c=o.fieldTransforms;return new xh(new zs(a),h,c)}class Bh extends Lh{_toFieldTransform(t){return new Fr(t.path,new Rr)}isEqual(t){return t instanceof Bh}}function $h(t,e){if(qh(t=h(t)))return Gh("Unsupported field value:",e,t),Hh(t,e);if(t instanceof Lh)return function(t,e){if(!Mh(e.xa))throw e.Ua(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Ua(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.Oa&&4!==e.xa)throw e.Ua("Nested arrays are not supported");return function(t,e){const n=[];let i=0;for(const s of t){let t=$h(s,e.Ba(i));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),i++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=h(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return Sr(e.k,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=ys.fromDate(t);return{timestampValue:vo(e.k,n)}}if(t instanceof ys){const n=new ys(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:vo(e.k,n)}}if(t instanceof Oh)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof _h)return{bytesValue:wo(e.k,t._byteString)};if(t instanceof Ah){const n=e.databaseId,i=t.firestore._databaseId;if(!i.isEqual(n))throw e.Ua(`Document reference is for database ${i.projectId}/${i.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:To(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Ua(`Unsupported field value: ${bh(t)}`)}(t,e)}function Hh(t,e){const n={};return bs(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):Es(t,((t,i)=>{const s=$h(i,e.Fa(t));null!=s&&(n[t]=s)})),{mapValue:{fields:n}}}function qh(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof ys||t instanceof Oh||t instanceof _h||t instanceof Ah||t instanceof Lh)}function Gh(t,e,n){if(!qh(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const i=bh(n);throw"an object"===i?e.Ua(t+" a custom object"):e.Ua(t+" "+i)}}function Kh(t,e,n){if((e=h(e))instanceof Rh)return e._internalPath;if("string"==typeof e)return function(t,e,n){if(e.search(zh)>=0)throw Xh(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new Rh(...e.split("."))._internalPath}catch(i){throw Xh(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}(t,e);throw Xh("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const zh=new RegExp("[~\\*/\\[\\]]");function Xh(t,e,n,i,s){const r=i&&!i.isEmpty(),o=void 0!==s;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let h="";return(r||o)&&(h+=" (found",r&&(h+=` in field ${i}`),o&&(h+=` in document ${s}`),h+=")"),new is(ns.INVALID_ARGUMENT,a+t+h)}function Qh(t,e){return t.some((t=>t.isEqual(e)))}function Wh(t,e){const n=function(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new is(ns.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=bh(t);throw new is(ns.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}(t.firestore,kh),i=function(t,e,...n){if(t=h(t),1===arguments.length&&(e=ps.A()),vh("doc","path",e),t instanceof Ih){const i=Is.fromString(e,...n);return wh(i),new Ah(t,null,new xs(i))}{if(!(t instanceof Ah||t instanceof Ch))throw new is(ns.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const i=t._path.child(Is.fromString(e,...n));return wh(i),new Ah(t.firestore,t instanceof Ch?t.converter:null,new xs(i))}}(t),s=function(t,e,n){let i;return i=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,i}(t.converter,e);return function(t,e){return function(t,e){const n=new ss;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const i=ch(t);try{const t=await function(t,e){const n=es(t),i=ys.now(),s=e.reduce(((t,e)=>t.add(e.key)),go());let r;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Wn.vn(t,s).next((s=>{r=s;const o=[];for(const t of e){const e=Gr(t,r.get(t.key));null!=e&&o.push(new Qr(t.key,e,Xs(e.value.mapValue),jr.exists(!0)))}return n.An.addMutationBatch(t,i,o,e)})))).then((t=>(t.applyToLocalDocumentSet(r),{batchId:t.batchId,changes:r})))}(i.localStore,e);i.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let i=t.Ko[t.currentUser.toKey()];i||(i=new io(gs)),i=i.insert(e,n),t.Ko[t.currentUser.toKey()]=i}(i,t.batchId,n),await ah(i,t.changes),await $a(i.remoteStore)}catch(t){const e=Za(t,"Failed to persist write");n.reject(e)}}(await ph(t),e,n))),n.promise}(function(t){return t._firestoreClient||Dh(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}(t),e)}(n,[jh(Uh(t.firestore),"addDoc",i._key,s,null!==t.converter,{}).toMutation(i._key,jr.exists(!1))]).then((()=>i))}!function(t,e=!0){Ki="9.6.1",D(new c("firestore",((t,{options:n})=>{const i=t.getProvider("app").getImmediate(),s=new kh(i,new as(t.getProvider("auth-internal")),new us(t.getProvider("app-check-internal")));return n=Object.assign({useFetchStreams:e},n),s._setSettings(n),s}),"PUBLIC")),L(qi,"3.4.1",t),L(qi,"3.4.1","esm2017")}();let Jh=0;const Yh=function(){const t=[];return{books:t,addBook:(e,n,i,s)=>{const r=function(t,e,n,i){const s=Jh;Jh+=1;const r={title:t,author:e,pages:n,isRead:i,index:s,toggleRead:()=>(r.isRead=!r.isRead,r.isRead)};return r}(e,n,i,s);return t.push(r),r}}},Zh=document.getElementById("add-button"),tc=document.getElementById("add-form"),ec=document.getElementById("library"),nc=document.getElementById("hide-button"),ic=document.getElementById("form-button"),{children:sc}=tc,rc=sc[1],oc=sc[4],ac=sc[7],hc=sc[10];function cc(t,e,n,i){const s=document.createElement("p");return s.classList.add(e),s.innerText=`${n}: ${i}`,t.appendChild(s),s}function lc(t,e,n){const i=document.createElement("div");i.setAttribute("data-index",t.index),i.classList.add("book"),cc(i,"book-title","Title",t.title),cc(i,"book-author","Author",t.author),cc(i,"book-pages","Pages",t.pages);const s=cc(i,"book-status","Status",t.isRead?"Have Read":"Not Read Yet"),r=document.createElement("button");r.addEventListener("click",(()=>{e(t),s.innerText="Status: "+(t.isRead?"Have Read":"Not Read Yet")})),r.innerText="Toggle Status",i.appendChild(r);const o=document.createElement("button");o.addEventListener("click",(()=>{n(t),i.remove()})),o.innerText="Delete Book",i.appendChild(o),ec.appendChild(i)}Zh.addEventListener("click",(()=>{tc.toggleAttribute("hidden"),Zh.toggleAttribute("hidden"),nc.toggleAttribute("hidden")})),nc.addEventListener("click",(()=>{tc.toggleAttribute("hidden"),Zh.toggleAttribute("hidden"),nc.toggleAttribute("hidden")})),rc.addEventListener("input",(()=>{rc.checkValidity()})),oc.addEventListener("input",(()=>{oc.checkValidity()})),ac.addEventListener("input",(()=>{ac.checkValidity()}));const uc=function(t,e,n,i){t.books.forEach((t=>{lc(t,e,n)})),ic.addEventListener("click",(t=>rc.validity.valid?(oc.checkValidity(),oc.validity.valid?(ac.checkValidity(),ac.validity.valid?(console.log("book accepted"),lc(i(rc.value,oc.value,ac.value,hc.checked),e,n),t.preventDefault(),!1):(console.log("pages rejected"),!1)):(console.log("author rejected"),!1)):(console.log("title rejected"),!1)))},fc=function(t=function(t="[DEFAULT]"){const e=C.get(t);if(!e)throw R.create("no-app",{appName:t});return e}()){return(e=t,n="firestore",e.container.getProvider(n)).getImmediate();var e,n}(function(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},e),i=n.name;if("string"!=typeof i||!i)throw R.create("bad-app-name",{appName:String(i)});const s=C.get(i);if(s){if(o(t,s.options)&&o(n,s.config))return s;throw R.create("duplicate-app",{appName:i})}const r=new f(i);for(const t of N.values())r.addComponent(t);const a=new _(t,n,r);return C.set(i,a),a}({apiKey:"AIzaSyA0xngi3EiPEO9lacm1gwDeOOJdti-PIGw",authDomain:"booklibrary-80465.firebaseapp.com",projectId:"booklibrary-80465",storageBucket:"booklibrary-80465.appspot.com",messagingSenderId:"24974076749",appId:"1:24974076749:web:474eb99bd92860c5792504"}));function dc(t){const e=[];t.books.forEach((t=>{t.isDeleted||e.push(t)})),localStorage.setItem("OdinLibrary",JSON.stringify(e))}const pc=function(t){uc(t,(e=>{e.toggleRead(),dc(t)}),(e=>{e.isDeleted=!0,dc(t)}),((e,n,i,s)=>{const r=t.addBook(e,n,i,s);return async function(t){console.log("try add firestore book");try{await Wh(function(t,e,...n){if(t=h(t),vh("collection","path",e),t instanceof Ih){const i=Is.fromString(e,...n);return Eh(i),new Ch(t,null,i)}{if(!(t instanceof Ah||t instanceof Ch))throw new is(ns.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const i=t._path.child(Is.fromString(e,...n));return Eh(i),new Ch(t.firestore,null,i)}}(fc,"books"),{title:t.title,author:t.author,pages:t.pages,isRead:t.isRead,timestamp:new Bh("serverTimestamp")})}catch(t){console.error("Error writing new message to Firebase Database",t)}console.log("firebase book accepted")}(r),r}))};pc(function(){const t=Yh(),e=JSON.parse(localStorage.getItem("OdinLibrary"));return console.log(e),e&&0!==e.length?e.forEach((e=>{const{title:n,author:i,pages:s,isRead:r}=e;t.addBook(n,i,s,r)})):(t.addBook("The quick brown fox","a lazy dog","5",!1),dc(t)),t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,